<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - metaprogramming</title>
    <link href="https://blorg.ericb.me/tag/metaprogramming.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/metaprogramming.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2015-08-06T00:00:00Z</updated>
    <entry>
    <title>Lisp Flavoured Erlang and Pynchon, oh my!</title>
    <link href="https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html" />
    <id>https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html</id>
    <published>2015-08-06T00:00:00Z</published>
    <updated>2015-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  6 August, 2015
      <br />
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/metaprogramming/index.html">metaprogramming</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
So, lately I've been getting increasingly into <a href="http://lfe.io">Lisp Flavoured Erlang (LFE)</a>.  If
you haven't tried it yet, or even if you have, check out the <a href="http://help.exercism.io/getting-started-with-lfe.html">Exercism.io track</a> I
helped organize.  My latest endeavour is porting Robert Levy's <a href="https://github.com/rplevy/swiss-arrows">swiss-arrows</a> from
Clojure to LFE.  It's been going well so far, despite having to rename it to
<a href="https://github.com/yurrriq/pynchon">pynchon</a>, since Erlang wasn't down with the hyphenated name and a few people on
the <a href="https://groups.google.com/forum/#!aboutgroup/lisp-flavoured-erlang">LFE Google group</a> suggested it.
</p>


<p>
Without further ado, here's a contrived example:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt; "testing"
     (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
            (lists:duplicate 3)
            (compose #'list/1 #'lists:flatten/1)
            (lfe_io:format '"non-updating: ~p\n"))
     (string:substr 5)
     (++ "winn" &lt;&gt;))
</pre>
</div>

<p>
<b>Note</b>: <code>#'compose/2</code> comes from Duncan McGreggor's <a href="https://github.com/lfex/clj">clj</a>, Clojure functions and
macros for LFE.
</p>

<p>
The wild-looking form above expands to something more like:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt;
 (progn
   (lfe_io:format
    '"non-updating: ~p\n"
    (list
     (lists:flatten
      (lists:duplicate 3 (string:substr "testing" 1 4)))))
   "testing")
 (string:substr 5)
 (++ "winn" &lt;&gt;))
</pre>
</div>

<p>
After that, it becomes apparent the "return track" is rather simple:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(++ "winn" (string:substr 5 "testing"))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (-&lt;&gt; "testing"
       (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
              (lists:duplicate 3)
              (compose #'list/1 #'lists:flatten/1)
              (lfe_io:format '"non-updating: ~p\n"))
       (string:substr 5)
       (++ "winn" &lt;&gt;))
non-updating: "testtesttest" ; printed
"winning"                    ; returned
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>#'clojure.core/some-> and the Power of Macros</title>
    <link href="https://blorg.ericb.me/2015/01/the-power-of-macros/index.html" />
    <id>https://blorg.ericb.me/2015/01/the-power-of-macros/index.html</id>
    <published>2015-01-02T00:00:00Z</published>
    <updated>2015-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  2 January, 2015
      <br />
      
      Tags: <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/metaprogramming/index.html">metaprogramming</a>
      
    </span>
  </p>
</section>
<section>
  <p>
<a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">Homoiconicity</a>, and <a href="https://twitter.com/yurrriq/status/536036269222936576">metaprogramming</a>, and <a href="http://learnxinyminutes.com/docs/clojure-macros/">macros</a>! Oh my!
</p>

<p>
In 2015, my love for these <a href="http://xkcd.com/297/">elegant weapons</a> will undoubtedly <a href="https://twitter.com/yurrriq/status/525703812833890305">grow fonder</a>.
</p>

<div class="org-src-container">
<pre class="src src-clojure">(comment
  ;; #'clojure.core/some-&gt; is one my favorite Clojure macros.
  (some-&gt; (meta #'clojure.core/some-&gt;) :doc println)
  ;; When expr is not nil, threads it into the first form (via -&gt;),
  ;; and when that result is not nil, through the next etc

  (macroexpand '(some-&gt; (meta #'clojure.core/some-&gt;) :doc println))

  (let* [G__2986 (meta (var clojure.core/some-&gt;))
         G__2986 (if (clojure.core/nil? G__2986)
                   nil
                   (clojure.core/-&gt; G__2986 :doc))
         G__2986 (if (clojure.core/nil? G__2986)
                   nil
                   (clojure.core/-&gt; G__2986 println))]
    G__2986)

  ;; Rewritten more readably to illustrate the point:
  (let [example (meta #'clojure.core/some-&gt;)
        example (when-not (nil? example)
                  (:doc example))
        example (when-not (nil? example)
                  (println example))]
    example)

  ;; Which brings me to another of my scattered thoughts,
  ;; Clojure has the #'clojure.core/when-not macro, but
  ;; for some reason, I find myself wanting to use 'unless,
  ;; as in Common Lisp:
  (defmacro unless (condition &amp;rest body)
    `(if (not ,condition) (progn ,@body)))

  ;; What better excuse to start writing my own macros?
  (ns fastidious.macros)

  (defmacro unless
    [condition &amp; body] `(if (not ~condition) (do ~@body)))

  ;; Side bonus: I used my desire for 'unless to drive
  ;; my experiments in integrating macros in ClojureScript,
  ;; with underwhelming success. It just works.
  (ns client.core
    (:require-macros [fastidious.macros :refer [unless]]))

  (let [lisp-is-lame? false]
    (unless lisp-is-lame?
      (println "IFL Lisp.")
      (println "Next up: /c[ad]{1,5}r/"))))
</pre>
</div>

<p>
See also: <a href="https://github.com/clojure/clojure/blob/28509b8caa95537cddd31152b7603de4d866c951/src/clj/clojure/core.clj#L7204-L7213"><code>#'clojure.core/some-&gt;</code> source</a> on GitHub
</p>

</section>
]]></summary>
</entry>

</feed>
