<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - open-source</title>
    <link href="https://blorg.ericb.me/tag/open-source.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/open-source.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2016-05-29T00:00:00Z</updated>
    <entry>
    <title>Bye Bye, Jekyll!</title>
    <link href="https://blorg.ericb.me/2016/05/bye-bye-jekyll/index.html" />
    <id>https://blorg.ericb.me/2016/05/bye-bye-jekyll/index.html</id>
    <published>2016-05-29T00:00:00Z</published>
    <updated>2016-05-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 29 May, 2016
      <br />
      
      Tags: <a href="/tag/blogging/index.html">blogging</a>, <a href="/tag/haskell/index.html">haskell</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Back in December of 2014, I set up a blog using <a href="https://ghost.org">Ghost</a> and <a href="https://github.com/axitkhurana/buster/">Buster</a>. That was all
fine and good, but left quite a bit to be desired. I'm not a Python user and the
whole workflow was a bit too clunky for my taste.
</p>

<p>
In July of 2015, I decided to migrate to
<a href="http://jekyllrb.com">Jekyll</a>.
It's pretty widely used and the integration with
<a href="https://pages.github.com">GitHub Pages</a> promised to be smooth and
easy.  In practice, I found its workflow to be similarly annoying. Worst of all,
it made me install, write and use Ruby.
<label for="sn-ruby-hater"
       class="margin-toggle">
&#8853;
</label>
<input type="checkbox"
       id="sn-ruby-hater"
       class="margin-toggle"/>
<span class="marginnote">
I'm a long-time Ruby hater. <a href="https://twitter.com/search?q=%2523sorrynotsorry">#sorrynotsorry</a>
</span>
</p>

<p>
What's more, GitHub seems to have a predilection for breaking things so often
and dramatically, that <a href="https://github.com/lfex/dragon">dragon</a> was born.
</p>

<p>
<a href="http://haskellbook.com">Learning Haskell</a> has been a <a href="https://www.youtube.com/watch?v=-1YjmXSyHa8">fantastic voyage</a>. Although I've not yet used it for
any "real" projects, I'm sold on its expressivity and general
mind-expanding-ness. I had seen <a href="https://jaspervdj.be/hakyll/">Hakyll</a> pop up on my radar a few times and
considered migrating to it for quite a while. Last night, I finally made the
leap. The experience was so great, I can't believe I didn't do it sooner.
</p>

<p>
From now on, my blog will be powered by
<a href="https://jaspervdj.be/hakyll/">Hakyll</a>.
<label for="sn-dragon"
       class="margin-toggle">
&#8853;
</label>
<input type="checkbox"
       id="sn-dragon"
       class="margin-toggle"/>
<span class="marginnote">
... at least until <a href="https://github.com/lfex/dragon">dragon</a> matures,
or I find an even better alternative.
</span>
You can find my
<a href="https://github.com/yurrriq/blorg/blob/master/hakyll/site.hs">
<code>site.hs</code></a>, which will undoubtedly grow and change over time, on
<a href="https://github.com/yurrriq/blorg">GitHub</a>.
</p>
<p>
Good riddance.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>lfe-rebar3/compile updates</title>
    <link href="https://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html" />
    <id>https://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html</id>
    <published>2016-02-11T00:00:00Z</published>
    <updated>2016-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 11 February, 2016
      <br />
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/erlang/index.html">erlang</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/rebar3/index.html">rebar3</a>, <a href="/tag/tooling/index.html">tooling</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Since much of my time these days is spent <code>(or 'writing 'developing
'evangelizing)</code> <a href="http://lfe.io">LFE</a>, it should come as no surprise that I use the <a href="https://github.com/lfe-rebar3/compile">rebar3
compiler plugin</a> extensively. In doing so, I noticed it always recompiles every
<code>.lfe</code> file it finds, irrespective of the staleness of the corresponding <code>.beam</code>
file. Having <a href="https://www.rebar3.org/docs/basic-usage#building">compiled</a> a fair amount of vanilla Erlang via <code>rebar3</code>, I knew it
didn't have to be that way.
</p>

<p>
To further my quest, <a href="https://github.com/tsloughter">tristan__</a> pointed me to <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L45-L48">run/7</a>, specifically its use of
<code>[check_last_mod]</code>. Before I <a href="https://github.com/quasiquoting/lfe-compile">forked</a> <a href="https://github.com/lfe-rebar3/compile">lfe-rebar3/compile</a>, it was using <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L41-L43">run/4</a>,
which does <b>NOT</b> make use of <code>[check_last_mod]</code>, hence the unnecessary
recompilation.
</p>

<p>
<a href="https://github.com/lfe-rebar3/compile/blob/0.2.1/src/lr3_comp.erl#L74">lfe-rebar3/compile/src/lr3_comp.erl:74</a>
</p>
<div class="org-src-container">
<pre class="src src-erlang"><span style="color: #92a65e; font-weight: bold;">rebar_base_compiler</span>:<span style="color: #92a65e; font-weight: bold;">run</span>(<span style="color: #cae682;">Opts</span>, [], <span style="color: #cae682;">Files</span>, <span style="color: #cae682;">DoCompile</span>).
</pre>
</div>

<p>
After some experimentation, and <a href="https://www.rebar3.org/docs/dependencies#checkout-dependencies">_checkouts</a> symlinking tricks, I came up with an
appropriate <code>run/7</code> incantation and made <a href="https://github.com/lfe-rebar3/compile/pull/5">a pull request</a>.
</p>

<p>
<a href="https://github.com/quasiquoting/lfe-compile/blob/0.3.0/src/lr3_comp.erl#L37-L39">quasiquoting/lfe-compile/src/lr3_comp.erl:37-39</a>
</p>
<div class="org-src-container">
<pre class="src src-erlang"><span style="color: #92a65e; font-weight: bold;">rebar_base_compiler</span>:<span style="color: #92a65e; font-weight: bold;">run</span>(<span style="color: #cae682;">Config</span>, <span style="color: #cae682;">FirstFiles</span>,
                        <span style="color: #cae682;">SourceDir</span>, <span style="color: #95e454;">".lfe"</span>, <span style="color: #cae682;">TargetDir</span>, <span style="color: #95e454;">".beam"</span>,
                        <span style="color: #8ac6f2; font-weight: bold;">fun</span> <span style="color: #92a65e; font-weight: bold;">compile/3</span>).
</pre>
</div>

<p>
With those changes, <code>rebar3 lfe compile</code> will now skip unmodified <code>.lfe</code>
files. Not only is this The Right Thingâ„¢ to do, but it should be <a href="https://xkcd.com/1205/">time saver</a> in
the long run.
</p>

<p>
Here's an example of the difference when compiling <a href="https://github.com/quasiquoting/lodox">Lodox</a>&#x2026;
</p>

<p>
&#x2026; using <code>run/4</code> via <a href="https://github.com/lfe-rebar3/compile/releases/tag/0.2.1">0.2.1</a>:
</p>
<div class="org-src-container">
<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example">
 ~~&gt;    Compiling ./src/lodox-html-writer.lfe ...
 ~~&gt;    Compiling ./src/lodox-p.lfe ...
 ~~&gt;    Compiling ./src/lodox-parse.lfe ...
 ~~&gt;    Compiling ./src/lodox-util.lfe ...
 ~~&gt;    Compiling ./src/lodox.lfe ...
 ~~&gt;    Compiling ./src/pandoc.lfe ...
 ~~&gt;    Compiling ./test/unit-lodox-tests.lfe ...
        1.39 real         1.14 user         0.24 sys
</pre>

<p>
&#x2026; using <code>run/7</code> via <a href="https://github.com/quasiquoting/lfe-compile/releases/tag/0.3.0">0.3.0</a>:
</p>
<div class="org-src-container">
<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example">
        0.94 real         0.73 user         0.20 sys
</pre>

<p>
A little more :cow::poop: microbenchmarking on a proprietary work project:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #99968b;"># </span><span style="color: #99968b;">run/4</span>
        3.58 real         3.02 user         0.58 sys

<span style="color: #99968b;"># </span><span style="color: #99968b;">run/7</span>
        1.83 real         1.46 user         0.35 sys
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Matching strings in LFE patterns</title>
    <link href="https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html" />
    <id>https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html</id>
    <published>2015-12-28T00:00:00Z</published>
    <updated>2015-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 28 December, 2015
      <br />
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/pattern-matching/index.html">pattern-matching</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
While writing an LFE solution for <a href="http://adventofcode.com/day/6">Day 6 of Advent of Code</a>, I found myself
wanting to write <code>parse_instruction/1</code> like this:
</p>
<div class="org-src-container">
<pre class="src src-erlang">parse_instruction("toggle " ++ Rest) -&gt; toggle(parse_coordinates(Rest));
parse_instruction("turn on " ++ Rest) -&gt; turn_on(parse_coordinates(Rest));
parse_instruction("turn off " ++ Rest) -&gt; turn_off(parse_coordinates(Rest)).

parse_coordinates(String) -&gt;
  {ok,[X0,Y0,X1,Y2],[]} = io_lib:fread("~d,~d through ~d,~d", String),
  {{X0,Y0},{X1,Y1}}.

toggle({{X0,Y0},{X1,Y1}}) -&gt; undefined.
turn_on({{X0,Y0},{X1,Y1}}) -&gt; undefined.
turn_off({{X0,Y0},{X1,Y1}}) -&gt; undefined.
</pre>
</div>

<p>
But the literal LFE translation <a href="https://github.com/rvirding/lfe/issues/176">doesn't work as desired</a>.
</p>
<div class="org-src-container">
<pre class="src src-lfe">(defun parse-instruction
  ([(++ "turn off " rest)]
   ...))
</pre>
</div>

<p>
Instead, invocation of a <code>defun</code> of that form throws a <code>function_clause</code> error.
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++ "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
exception error: function_clause
</pre>
</div>

<p>
After this discovery, I took to <a href="http://webchat.freenode.net/?channels=erlang-lisp">#erlang-lisp</a> and tried to figure out why.
Discussing the issue with <code>@rvirding</code> for a few minutes, we decided adding <code>++*</code>
and having patterns like <code>(++* "prefix" suffix)</code> expand to nested <code>cons</code>-es was
a solid approach.
</p>

<p>
N.B. In <a href="https://github.com/rvirding/lfe/releases/tag/v0.10.1">v0.10.1</a>, <code>exp_append/1</code> had the following <a href="https://github.com/rvirding/lfe/blob/v0.10.1/src/lfe_macro.erl#L911-L912">clause</a>, commented out.
</p>
<div class="org-src-container">
<pre class="src src-erlang">%% Cases with lists of numbers (strings).
[[N|Ns]|Es] when is_number(N) -&gt; [cons,N,['++',Ns|Es]];
</pre>
</div>

<p>
Rather than take the overly complicated approach of counting and limiting the
number of expanded <code>cons</code>-es and bottoming out to a call to <code>erlang:++</code>, we
decided to <a href="http://www.catb.org/jargon/html/K/KISS-Principle.html">keep it simple</a> and just let <code>++*</code> patterns do their own thing.
</p>

<p>
The <a href="https://github.com/rvirding/lfe/compare/b867573e9d144988b5bc70bfe00aa08b27b3a7d6...a5d7c23ebd3005d4f9ff8714d8e02f06aa2d6abe">solution</a> we came up with is as follows:
</p>
<div class="org-src-container">
<pre class="src src-erlang">%% exp_predef(...) -&gt; ...;
exp_predef(['++*'|Abody], _, St) -&gt;
  Exp = exp_prefix(Abody),
  {yes,Exp,St};
%% exp_predef(...) -&gt; ....

exp_prefix([[N|Ns]|Es]) when is_number(N) -&gt; [cons,N,['++*',Ns|Es]];
exp_prefix([[]|Es]) -&gt; ['++*'|Es];
exp_prefix(Args) -&gt; exp_append(Args).
</pre>
</div>

<p>
Now in the <a href="https://github.com/rvirding/lfe/tree/develop">develop</a> branch, you can do the following:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++* "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

<p>
or even:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++* "p" "r" "e" "f" "i" "x" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Lisp Flavoured Erlang and Pynchon, oh my!</title>
    <link href="https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html" />
    <id>https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html</id>
    <published>2015-08-06T00:00:00Z</published>
    <updated>2015-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  6 August, 2015
      <br />
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/metaprogramming/index.html">metaprogramming</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
So, lately I've been getting increasingly into <a href="http://lfe.io">Lisp Flavoured Erlang (LFE)</a>.  If
you haven't tried it yet, or even if you have, check out the <a href="http://help.exercism.io/getting-started-with-lfe.html">Exercism.io track</a> I
helped organize.  My latest endeavour is porting Robert Levy's <a href="https://github.com/rplevy/swiss-arrows">swiss-arrows</a> from
Clojure to LFE.  It's been going well so far, despite having to rename it to
<a href="https://github.com/yurrriq/pynchon">pynchon</a>, since Erlang wasn't down with the hyphenated name and a few people on
the <a href="https://groups.google.com/forum/#!aboutgroup/lisp-flavoured-erlang">LFE Google group</a> suggested it.
</p>


<p>
Without further ado, here's a contrived example:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt; "testing"
     (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
            (lists:duplicate 3)
            (compose #'list/1 #'lists:flatten/1)
            (lfe_io:format '"non-updating: ~p\n"))
     (string:substr 5)
     (++ "winn" &lt;&gt;))
</pre>
</div>

<p>
<b>Note</b>: <code>#'compose/2</code> comes from Duncan McGreggor's <a href="https://github.com/lfex/clj">clj</a>, Clojure functions and
macros for LFE.
</p>

<p>
The wild-looking form above expands to something more like:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt;
 (progn
   (lfe_io:format
    '"non-updating: ~p\n"
    (list
     (lists:flatten
      (lists:duplicate 3 (string:substr "testing" 1 4)))))
   "testing")
 (string:substr 5)
 (++ "winn" &lt;&gt;))
</pre>
</div>

<p>
After that, it becomes apparent the "return track" is rather simple:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(++ "winn" (string:substr 5 "testing"))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (-&lt;&gt; "testing"
       (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
              (lists:duplicate 3)
              (compose #'list/1 #'lists:flatten/1)
              (lfe_io:format '"non-updating: ~p\n"))
       (string:substr 5)
       (++ "winn" &lt;&gt;))
non-updating: "testtesttest" ; printed
"winning"                    ; returned
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>ip.ericb.me</title>
    <link href="https://blorg.ericb.me/2015/07/ip.ericb.me/index.html" />
    <id>https://blorg.ericb.me/2015/07/ip.ericb.me/index.html</id>
    <published>2015-07-13T00:00:00Z</published>
    <updated>2015-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 13 July, 2015
      <br />
      
      Tags: <a href="/tag/hack/index.html">hack</a>, <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/web-service/index.html">web-service</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
As a follow-up to <a href="http://blorg.ericb.me/2014/12/icanhazip.com">my previous post about icanhazip.com</a>, I figured it bears
mentioning I've since set up <a href="https://github.com/yurrriq/what-is-my-ip">my own IP echo service</a> and am running it at
<a href="http://ip.ericb.me">ip.ericb.me</a>.
</p>


<p>
Its excruciatingly simple Clojure source looks something like this:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(defroutes app
  (GET "/" {{x-real-ip "x-real-ip"} :headers}
    {:status  200
     :headers {"Content-Type" "text/plain"}
     :body    x-real-ip}))

(defn -main [&amp; args]
  (-&gt;&gt; (or (some-&gt; (env :port) (Integer/parseInt)) 5000)
       (hash-map :port)
       (run-server app)))
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>exercism.io</title>
    <link href="https://blorg.ericb.me/2015/01/exercism.io/index.html" />
    <id>https://blorg.ericb.me/2015/01/exercism.io/index.html</id>
    <published>2015-01-03T00:00:00Z</published>
    <updated>2015-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  3 January, 2015
      <br />
      
      Tags: <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/learning/index.html">learning</a>, <a href="/tag/polyglot/index.html">polyglot</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
<a href="http://xkcd.com/353/">Hello, world!</a> I started working on the <a href="http://exercism.io/languages/clojure">Clojure exercises</a> from <a href="http://exercism.io/about">exercism.io</a>.
</p>

<p>
Feel free to nitpick <a href="http://exercism.io/yurrriq">my solutions</a>, and browse the <a href="https://github.com/yurrriq/exercism/tree/clojure">source on GitHub</a>.
</p>

<p>
Maybe this will prove to be a fun way to explore <a href="https://github.com/yurrriq/exercism/branches/all">different languages</a>.
</p>

</section>
]]></summary>
</entry>

</feed>
