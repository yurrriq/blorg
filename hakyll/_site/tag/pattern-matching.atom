<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - pattern-matching</title>
    <link href="https://blorg.ericb.me/tag/pattern-matching.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/pattern-matching.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2015-12-28T00:00:00Z</updated>
    <entry>
    <title>Matching strings in LFE patterns</title>
    <link href="https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html" />
    <id>https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html</id>
    <published>2015-12-28T00:00:00Z</published>
    <updated>2015-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 28 December, 2015
      <br />
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/pattern-matching/index.html">pattern-matching</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
While writing an LFE solution for <a href="http://adventofcode.com/day/6">Day 6 of Advent of Code</a>, I found myself
wanting to write <code>parse_instruction/1</code> like this:
</p>
<div class="org-src-container">
<pre class="src src-erlang">parse_instruction("toggle " ++ Rest) -&gt; toggle(parse_coordinates(Rest));
parse_instruction("turn on " ++ Rest) -&gt; turn_on(parse_coordinates(Rest));
parse_instruction("turn off " ++ Rest) -&gt; turn_off(parse_coordinates(Rest)).

parse_coordinates(String) -&gt;
  {ok,[X0,Y0,X1,Y2],[]} = io_lib:fread("~d,~d through ~d,~d", String),
  {{X0,Y0},{X1,Y1}}.

toggle({{X0,Y0},{X1,Y1}}) -&gt; undefined.
turn_on({{X0,Y0},{X1,Y1}}) -&gt; undefined.
turn_off({{X0,Y0},{X1,Y1}}) -&gt; undefined.
</pre>
</div>

<p>
But the literal LFE translation <a href="https://github.com/rvirding/lfe/issues/176">doesn't work as desired</a>.
</p>
<div class="org-src-container">
<pre class="src src-lfe">(defun parse-instruction
  ([(++ "turn off " rest)]
   ...))
</pre>
</div>

<p>
Instead, invocation of a <code>defun</code> of that form throws a <code>function_clause</code> error.
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++ "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
exception error: function_clause
</pre>
</div>

<p>
After this discovery, I took to <a href="http://webchat.freenode.net/?channels=erlang-lisp">#erlang-lisp</a> and tried to figure out why.
Discussing the issue with <code>@rvirding</code> for a few minutes, we decided adding <code>++*</code>
and having patterns like <code>(++* "prefix" suffix)</code> expand to nested <code>cons</code>-es was
a solid approach.
</p>

<p>
N.B. In <a href="https://github.com/rvirding/lfe/releases/tag/v0.10.1">v0.10.1</a>, <code>exp_append/1</code> had the following <a href="https://github.com/rvirding/lfe/blob/v0.10.1/src/lfe_macro.erl#L911-L912">clause</a>, commented out.
</p>
<div class="org-src-container">
<pre class="src src-erlang">%% Cases with lists of numbers (strings).
[[N|Ns]|Es] when is_number(N) -&gt; [cons,N,['++',Ns|Es]];
</pre>
</div>

<p>
Rather than take the overly complicated approach of counting and limiting the
number of expanded <code>cons</code>-es and bottoming out to a call to <code>erlang:++</code>, we
decided to <a href="http://www.catb.org/jargon/html/K/KISS-Principle.html">keep it simple</a> and just let <code>++*</code> patterns do their own thing.
</p>

<p>
The <a href="https://github.com/rvirding/lfe/compare/b867573e9d144988b5bc70bfe00aa08b27b3a7d6...a5d7c23ebd3005d4f9ff8714d8e02f06aa2d6abe">solution</a> we came up with is as follows:
</p>
<div class="org-src-container">
<pre class="src src-erlang">%% exp_predef(...) -&gt; ...;
exp_predef(['++*'|Abody], _, St) -&gt;
  Exp = exp_prefix(Abody),
  {yes,Exp,St};
%% exp_predef(...) -&gt; ....

exp_prefix([[N|Ns]|Es]) when is_number(N) -&gt; [cons,N,['++*',Ns|Es]];
exp_prefix([[]|Es]) -&gt; ['++*'|Es];
exp_prefix(Args) -&gt; exp_append(Args).
</pre>
</div>

<p>
Now in the <a href="https://github.com/rvirding/lfe/tree/develop">develop</a> branch, you can do the following:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++* "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

<p>
or even:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++* "p" "r" "e" "f" "i" "x" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

</section>
]]></summary>
</entry>

</feed>
