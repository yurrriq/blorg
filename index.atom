<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me</title>
    <link href="http://blorg.ericb.me/index.atom" rel="self" />
    <link href="http://blorg.ericb.me" />
    <id>http://blorg.ericb.me/index.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2019-06-17T00:00:00Z</updated>
    <entry>
    <title>OpenConnect Launch Daemon</title>
    <link href="http://blorg.ericb.me/2019/06/openconnect-launch-daemon/index.html" />
    <id>http://blorg.ericb.me/2019/06/openconnect-launch-daemon/index.html</id>
    <published>2019-06-17T00:00:00Z</published>
    <updated>2019-06-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 17 June, 2019
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/darwin/index.html">darwin</a>, <a href="/tag/vpn/index.html">vpn</a>, <a href="/tag/openconnect/index.html">openconnect</a>, <a href="/tag/launchd/index.html">launchd</a>, <a href="/tag/daemon/index.html">daemon</a>
      
    </span>
  </p>
</section>
<section>
  <p>
What follows is a sparsely documented literate program to manage an OpenConnect
VPN connection with <code>launchd</code> on macOS. Many thanks to <a href="https://github.com/ashgillman">Ashley Gilman</a> for their
blog post, <a href="https://ashgillman.github.io/2017/02/14/openconnect-launchd.html">Managing an Openconnect VPN Connection with launchd on OSX</a>, upon
which this is based.
</p>

<div id="outline-container-org7804262" class="outline-2">
<h2 id="org7804262">OpenConnect Wrapper</h2>
<div class="outline-text-2" id="text-org7804262">
<p>
Define a function <code>handler</code> to send an <code>INT</code> signal to <code>$PID</code>, then <code>trap</code>
<code>TERM</code> signals and call <code>handler</code> instead, which will enable ending an
<code>openconnect</code> process gracefully with <code>launchd</code>.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #cae682;">handler</span>() {
    kill -INT <span style="color: #95e454;">"$PID"</span> 2&gt;/dev/null
}

<span style="color: #8ac6f2; font-weight: bold;">trap</span> handler SIGTERM
</pre>
</div>

<p>
Pipe <code>STDIN</code> and pass any given arguments to <code>/usr/local/bin/openconnect</code>, and
send to the background.
</p>
<div class="org-src-container">
<pre class="src src-bash">cat | /usr/local/bin/openconnect <span style="color: #95e454;">"$@"</span> &amp;
</pre>
</div>

<p>
Keep the wrapper process alive as long as the <code>openconnect</code> process is, by
capturing its PID and <code>wait</code>-ing for it.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #cae682;">PID</span>=$<span style="color: #cae682;">!</span>
<span style="color: #e5786d;">wait</span> <span style="color: #95e454;">"$PID"</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org8372b8c" class="outline-2">
<h2 id="org8372b8c">Password File</h2>
<div class="outline-text-2" id="text-org8372b8c">
<p>
Store the password (without a trailing newline) in a file,
<code>/etc/openconnect/passwd</code>, owned by <code>root</code>.
</p>

<p>
Remove read/write access from all but <code>root</code>.
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo chmod og-rw /etc/openconnect/passwd
</pre>
</div>
</div>
</div>

<div id="outline-container-orge5907a8" class="outline-2">
<h2 id="orge5907a8">Launch Daemon</h2>
<div class="outline-text-2" id="text-orge5907a8">
<p>
Set up a launch daemon by creating a property list file,
<code>/Library/LaunchDaemons/me.ericb.openconnect.plist</code>.
</p>
<div class="org-src-container">
<pre class="src src-xml"><span style="color: #95e454;">&lt;?</span><span style="color: #8ac6f2; font-weight: bold;">xml</span><span style="color: #95e454;"> </span><span style="color: #95e454;">version="1.0" encoding="UTF-8"</span><span style="color: #95e454;">?&gt;</span>
<span style="color: #95e454;">&lt;!</span><span style="color: #95e454;">DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
&lt;<span style="color: #cae682;">plist</span> <span style="color: #cae682;">version</span>=<span style="color: #95e454;">"1.0"</span>&gt;
  &lt;<span style="color: #cae682;">dict</span>&gt;
    &lt;<span style="color: #cae682;">key</span>&gt;Label&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;me.ericb.openconnect-example&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Specify that the password, stored in <code>/etc/openconnect/passwd-example</code>, will be
supplied via stdin.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;StandardInPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/etc/openconnect/passwd-example&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Use the wrapper defined above.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;ProgramArguments&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">array</span>&gt;
      &lt;<span style="color: #cae682;">string</span>&gt;/etc/openconnect-wrapper&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Tell <code>openconnect</code> we're supplying the password via stdin.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--passwd-on-stdin&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the OpenConnect protocol to AnyConnect.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--protocol=anyconnect&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the reconnect timeout to <code>1800</code> seconds.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--reconnect-timeout=1800&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the username.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--user=alice&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Finally, specify the VPN server hostname.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;vpn.example.com&lt;/<span style="color: #cae682;">string</span>&gt;
    &lt;/<span style="color: #cae682;">array</span>&gt;
</pre>
</div>

<p>
Configure log files for debugging.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;StandardOutPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/var/log/me.ericb.openconnectconsole.log&lt;/<span style="color: #cae682;">string</span>&gt;
    &lt;<span style="color: #cae682;">key</span>&gt;StandardErrorPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/var/log/me.ericb.openconnect/error.log&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Close the open XML tags.
</p>
<div class="org-src-container">
<pre class="src src-xml">  &lt;/<span style="color: #cae682;">dict</span>&gt;
&lt;/<span style="color: #cae682;">plist</span>&gt;
</pre>
</div>
</div>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Spooky Security</title>
    <link href="http://blorg.ericb.me/2018/09/spooky-security/index.html" />
    <id>http://blorg.ericb.me/2018/09/spooky-security/index.html</id>
    <published>2018-09-07T00:00:00Z</published>
    <updated>2018-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  7 September, 2018
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/darwin/index.html">darwin</a>, <a href="/tag/keyboard/index.html">keyboard</a>, <a href="/tag/security/index.html">security</a>, <a href="/tag/skhd/index.html">skhd</a>, <a href="/tag/chunkwm/index.html">chunkwm</a>
      
    </span>
  </p>
</section>
<section>
  <p>
<b>Update (21 September, 2018)</b>: It turns out <a href="https://github.com/keybase/client">Keybase.app</a> was to blame. I've since
quit it and removed it from my login items, and all is well again.  This
<a href="https://github.com/koekeishiya/skhd/issues/48">skhd issue thread</a> details some excellent debugging strategies, which I've
modified slightly here.
</p>

<div class="org-src-container">
<pre class="src src-sh">ioreg -lw 0 <span style="color: #95e454;">\</span>
    | perl -nle <span style="color: #95e454;">'print $1 if /"kCGSSessionSecureInputPID"=(\d+)/'</span> <span style="color: #95e454;">\</span>
    | uniq <span style="color: #95e454;">\</span>
    | xargs ps -o <span style="color: #cae682;">comm</span>= -p
</pre>
</div>

<p>
For example, when I enable secure keyboard entry in <code>Terminal.app</code>, I see the
following output.
</p>

<pre class="example">
/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal
</pre>

<hr>

<p>
I've been using <a href="https://koekeishiya.github.io/chunkwm/">chunkwm</a> and <a href="https://github.com/koekeishiya/skhd">skhd</a> to help make Darwin more palatable, but <code>skhd</code>
suddenly stopped working. When I try to start it manually, I get the following
error.
</p>

<pre class="example">
skhd: secure keyboard entry is enabled! abort..
</pre>

<p>
<a href="https://github.com/koekeishiya/skhd/issues/48">The internet suggested</a> I disable <a href="https://iterm2.com/">iTerm 2</a>'s <i>Secure Keyboard Entry</i>, but I've
switched to <a href="https://sw.kovidgoyal.net/kitty/">kitty</a>.
</p>

<p>
After some further frantic <a href="https://duckduckgo.com/">DuckDuckGo</a>-ing, I came across a function,
<code>DisableSecureEventInput</code>, which seemed like the answer, so I wrote a quick
program to call it and try to end my troubles.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #e5786d;">#include</span> <span style="color: #95e454;">&lt;Carbon/Carbon.h&gt;</span>


<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">main</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">argc</span>, <span style="color: #8ac6f2; font-weight: bold;">const</span> <span style="color: #92a65e; font-weight: bold;">char</span> *<span style="color: #cae682;">argv</span>[])
{
    <span style="color: #8ac6f2; font-weight: bold;">if</span> (IsSecureEventInputEnabled())
        printf(<span style="color: #95e454;">"Secure keyboard entry is enabled.\n"</span>);

    DisableSecureEventInput();

    <span style="color: #8ac6f2; font-weight: bold;">if</span> (IsSecureEventInputEnabled())
        printf(<span style="color: #95e454;">"Secure keyboard entry is still enabled.\n"</span>);


    <span style="color: #8ac6f2; font-weight: bold;">return</span> 0;
}
</pre>
</div>

<p>
No such luck. I'm <a href="https://www.youtube.com/watch?v=qjGjuiFKE04">literally dying</a>.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>Undefined Behaviour</title>
    <link href="http://blorg.ericb.me/2018/05/undefined-behaviour/index.html" />
    <id>http://blorg.ericb.me/2018/05/undefined-behaviour/index.html</id>
    <published>2018-05-07T00:00:00Z</published>
    <updated>2018-05-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  7 May, 2018
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/c/index.html">c</a>, <a href="/tag/compilers/index.html">compilers</a>, <a href="/tag/school/index.html">school</a>, <a href="/tag/facepalm/index.html">facepalm</a>
      
    </span>
  </p>
</section>
<section>
  <p>
A friend at work today was telling me about his wife's C++ class,
wherein the students were asked to predict the behaviour of the
following snippet.
</p>

<div class="org-src-container">
<pre class="src src-c" id="org7bd0c33">x = 10;
y = ++x + --x;
</pre>
</div>

<p>
For simplicity, let's assume the type of both <code>x</code> and <code>y</code> is <code>int</code>.
</p>
<div class="org-src-container">
<pre class="src src-c" id="org163c55a"><span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">x</span>, <span style="color: #cae682;">y</span>;
</pre>
</div>

<p>
We can inspect the final state of <code>x</code> and <code>y</code> with a simple <code>printf</code> call.
</p>
<div class="org-src-container">
<pre class="src src-c" id="orgf4542c0">printf(<span style="color: #95e454;">"x = %d, y = %d\n"</span>, x, y);
</pre>
</div>

<p>
Now, let's see how different compilers handle <a href="https://github.com/yurrriq/blorg/blob/master/hakyll/code/incdec.c">our program</a>.
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #e5786d;">#include</span> <span style="color: #95e454;">&lt;stdio.h&gt;</span>


<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">main</span>(<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">argc</span>, <span style="color: #92a65e; font-weight: bold;">char</span> **<span style="color: #cae682;">argv</span>)
{
    x = 10;
    y = ++x + --x;

    printf(<span style="color: #95e454;">"x = %d, y = %d\n"</span>, x, y);
}
</pre>
</div>

<p>
At first glance, I would expect the right-hand side of the
initialization of <code>y</code> to evaluate to <code>11 + 10</code>, i.e. <code>21</code>.
</p>

<pre class="example">
Apple LLVM version 10.0.1 (clang-1001.0.46.4)

incdec.c:9:9: warning: multiple unsequenced modifications to 'x' [-Wunsequenced]
    y = ++x + --x;
        ^     ~~
1 warning generated.

x = 10, y = 21

</pre>

<p>
Unsurprisingly, GCC computes the final value of <code>x</code> to be <code>10</code>, the
same as its initial value, after being incremented and
decremented. It's markedly <b>less</b> intuitive to me that the final value
of <code>y</code> is <code>20</code>.
</p>

<p>
Clang, on the other hand, agrees with me, i.e. computes the final
value of <code>y</code> to be <code>21</code>.
</p>

<pre class="example">
Apple LLVM version 10.0.1 (clang-1001.0.46.4)

incdec.c:9:9: warning: multiple unsequenced modifications to 'x' [-Wunsequenced]
    y = ++x + --x;
        ^     ~~
1 warning generated.

x = 10, y = 21

</pre>

<p>
Both compilers warn about unsequenced modifications and the resultant
undefined behaviour. Digging around a bit leads to some fascinating
discussions. The GCC team maintains a <a href="https://gcc.gnu.org/readings.html">list of further reading</a>,
including a few formal models and analyses of sequence points in
C. Further exploration is left as an exercise for the reader.
</p>

<p>
<b>tl;dr</b> (from <a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html">https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html</a>)
</p>

<blockquote>
<p>
It is not specified when between sequence points modifications to the
values of objects take effect.
</p>
</blockquote>

<blockquote>
<p>
The standard is worded confusingly, therefore there is some debate
over the precise meaning of the sequence point rules in subtle cases.
</p>
</blockquote>

</section>
]]></summary>
</entry>
<entry>
    <title>Proving Addition is Commutative in Idris</title>
    <link href="http://blorg.ericb.me/2016/09/proving-addition-is-commutative-in-idris/index.html" />
    <id>http://blorg.ericb.me/2016/09/proving-addition-is-commutative-in-idris/index.html</id>
    <published>2016-09-07T00:00:00Z</published>
    <updated>2016-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  7 September, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/idris/index.html">idris</a>, <a href="/tag/theorem-proving/index.html">theorem-proving</a>, <a href="/tag/books/index.html">books</a>
      
    </span>
  </p>
</section>
<section>
  <p>
First off, I think <a href="http://www.idris-lang.org">Idris</a> is pretty great. Over the past several months, I've
been thoroughly enjoying reading and working through <a href="https://www.manning.com/books/type-driven-development-with-idris"><i>Type-Driven Development
with Idris</i></a>, as well as chatting with the community on IRC (<code>#idris</code> on
freenode).
</p>

<p>
For every <a href="https://www.manning.com/meap-program">MEAP</a> book, Manning provides a forum. To be honest, though I've
partaken in quite a few MEAPs, I've never really participated in the fora. In
<a href="https://forums.manning.com/forums/type-driven-development-with-idris">the <i>Type-Driven Development with Idris</i> forum</a>, however, I've made a whopping
<b>two</b> posts so far. One was a clarifying question about a possible error in the
text and the other was an answer to a fellow reader's question. My answer seemed
like a good example of how Idris works, so I thought I'd turn it into a blog
post. Here goes.
</p>

<p>
In this example, we're trying to prove that addition of natural numbers is
<a href="https://en.wikipedia.org/wiki/Commutative_property">commutative</a>, i.e.
$$\forall n,m \in \mathbb{N}\ (n + m \equiv m + n)$$
&#x2026; which we can express in Idris as follows:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
</pre>
</div>

<p>
The type signature for <code>myPlusCommutative</code> can be read as something like, "For
all natural numbers <code>n</code> and <code>m</code>, <code>n</code> plus <code>m</code> is exactly equivalent to <code>m</code> plus
<code>n</code>."
</p>

<p>
Over-simplifying the <a href="https://en.wikipedia.org/wiki/Curry%25E2%2580%2593Howard_correspondence">Curry-Howard correspondence</a>, if we can write a <a href="https://en.wikipedia.org/wiki/Total_functional_programming">total
function</a> that satisfies the type signature, then we've effectively written a
proof for the corresponding <a href="https://en.wikipedia.org/wiki/Universal_quantification">universal quantification</a>.
</p>

<p>
Idris has some great interactive editing tools, so I'll try to show those off a
bit here too. For a start, we can call <code>idris-add-clause</code> (<code>M-RET d</code> in
<a href="http://spacemacs.org/layers/+lang/idris/README.html">Spacemacs</a>) to get:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs</span>
</pre>
</div>

<p>
The prefix <code>?</code> signifies a hole and in this case, the type of that hole is:
</p>
<div class="org-src-container">

<pre class="src src-idris">  <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
  <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
<span style="color: #99968b;">--------------------------------------</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
</pre>
</div>

<p>
Next, we can case split (<code>idris-case-split</code>, <code>M-RET c</code>) on <code>n</code>:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span>  <span style="color: #f6f3e8; background-color: #242424;">Z</span>    <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_1</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_2</span>
</pre>
</div>

<p>
For <code>?myPlusCommutative_rhs_1</code> we need to prove that \(m = m + 0\).
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs_1</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> 0
</pre>
</div>

<p>
Fortunately, the <code>Prelude</code> has a proof that's almost exactly what we want:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">plusZeroRightNeutral</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">+</span> 0 <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">left</span>
</pre>
</div>

<p>
Since we need to swap the left- and right-hand sides, we can use <code>sym</code>:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">sym</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">right</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">right</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">left</span>
</pre>
</div>

<p>
So the complete definition for the <a href="https://en.wikipedia.org/wiki/Mathematical_induction"><i>base case</i></a> of <code>myPlusCommutative</code> is:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span>  <span style="color: #f6f3e8; background-color: #242424;">Z</span>    <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">sym</span> (<span style="color: #f6f3e8; background-color: #242424;">plusZeroRightNeutral</span> <span style="color: #f6f3e8; background-color: #242424;">m</span>)
</pre>
</div>

<p>
Next, we've got to tackle the <i>inductive step</i>. Since we know we'll need to
reduce to the <i>base case</i>, let's define a local variable <code>inductiveHypothesis</code>:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_2</span>
</pre>
</div>

<p>
Examining the type of <code>?myPlusCommutative_rhs_2</code>:
</p>
<div class="org-src-container">

<pre class="src src-idris">  <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
  <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
  <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>
  _<span style="color: #8ac6f2; font-weight: bold;">rewrite</span><span style="color: #f6f3e8; background-color: #242424;">_rule</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>
<span style="color: #99968b;">--------------------------------------</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs_2</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">S</span> (<span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>)
</pre>
</div>

<p>
&#x2026; we see we need to prove the successor of \(k\) plus \(m\) is exactly equivalent
to \(m\) plus the successor of \(k\), i.e.
$$\forall m \in \mathbb{N}\ (S(k + m) \equiv m + S(k))$$
</p>

<p>
Prelude to the rescue, yet again:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span>
                    (<span style="color: #f6f3e8; background-color: #242424;">right</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">S</span> (<span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">right</span>) <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">right</span>
</pre>
</div>

<p>
Now we can <code>rewrite</code> the hole using <code>plusSuccRightSucc</code> with <code>m</code> as <code>left</code> and
<code>k</code> as <code>right</code>:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
            <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_2</span>
</pre>
</div>

<p>
Eliding the repetitive bits, we get:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs_2</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>)
</pre>
</div>

<p>
&#x2026; which looks like our old friend, <code>Refl</code>:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">Refl</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">x</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">x</span>
</pre>
</div>

<p>
At this point, Idris can fill in the hole for us, via <code>idris-proof-search</code>
(<code>M-RET p</code>):
</p>

<div class="org-src-container">

<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
            <span style="color: #f6f3e8; background-color: #242424;">Refl</span>
</pre>
</div>

<p>
Tidying up a bit for my taste, we arrive at the complete (and total) definition:
</p>
<div class="org-src-container">

<pre class="src src-idris"><span style="color: #99968b;">|||</span><span style="color: #95e454;"> Addition of natural numbers is commutative.</span>
<span style="color: #8ac6f2; font-weight: bold;">total</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> (<span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>) <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span>  <span style="color: #f6f3e8; background-color: #242424;">Z</span>    <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">sym</span> (<span style="color: #f6f3e8; background-color: #242424;">plusZeroRightNeutral</span> <span style="color: #f6f3e8; background-color: #242424;">m</span>)
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> (<span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>) <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
                                    <span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>
</pre>
</div>
<p>
\(\square\)
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>Bye Bye, Jekyll!</title>
    <link href="http://blorg.ericb.me/2016/05/bye-bye-jekyll/index.html" />
    <id>http://blorg.ericb.me/2016/05/bye-bye-jekyll/index.html</id>
    <published>2016-05-29T00:00:00Z</published>
    <updated>2016-05-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 29 May, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/blogging/index.html">blogging</a>, <a href="/tag/haskell/index.html">haskell</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Back in December of 2014, I set up a blog using <a href="https://ghost.org">Ghost</a> and <a href="https://github.com/axitkhurana/buster/">Buster</a>. That was all
fine and good, but left quite a bit to be desired. I'm not a Python user and the
whole workflow was a bit too clunky for my taste.
</p>

<p>
In July of 2015, I decided to migrate to
<a href="http://jekyllrb.com">Jekyll</a>.
It's pretty widely used and the integration with
<a href="https://pages.github.com">GitHub Pages</a> promised to be smooth and
easy.  In practice, I found its workflow to be similarly annoying. Worst of all,
it made me install, write and use Ruby.
<label for="sn-ruby-hater"
       class="margin-toggle">
&#8853;
</label>
<input type="checkbox"
       id="sn-ruby-hater"
       class="margin-toggle"/>
<span class="marginnote">
I'm a long-time Ruby hater. <a href="https://twitter.com/search?q=%2523sorrynotsorry">#sorrynotsorry</a>
</span>
</p>

<p>
What's more, GitHub seems to have a predilection for breaking things so often
and dramatically, that <a href="https://github.com/lfex/dragon">dragon</a> was born.
</p>

<p>
<a href="http://haskellbook.com">Learning Haskell</a> has been a <a href="https://www.youtube.com/watch?v=-1YjmXSyHa8">fantastic voyage</a>. Although I've not yet used it for
any "real" projects, I'm sold on its expressivity and general
mind-expanding-ness. I had seen <a href="https://jaspervdj.be/hakyll/">Hakyll</a> pop up on my radar a few times and
considered migrating to it for quite a while. Last night, I finally made the
leap. The experience was so great, I can't believe I didn't do it sooner.
</p>

<p>
From now on, my blog will be powered by
<a href="https://jaspervdj.be/hakyll/">Hakyll</a>.
<label for="sn-dragon"
       class="margin-toggle">
&#8853;
</label>
<input type="checkbox"
       id="sn-dragon"
       class="margin-toggle"/>
<span class="marginnote">
... at least until <a href="https://github.com/lfex/dragon">dragon</a> matures,
or I find an even better alternative.
</span>
You can find my
<a href="https://github.com/yurrriq/blorg/blob/master/hakyll/site.hs">
<code>site.hs</code></a>, which will undoubtedly grow and change over time, on
<a href="https://github.com/yurrriq/blorg">GitHub</a>.
</p>
<p>
Good riddance.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>Tracing LFE Functions</title>
    <link href="http://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html" />
    <id>http://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html</id>
    <published>2016-04-12T00:00:00Z</published>
    <updated>2016-04-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 12 April, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/tracing/index.html">tracing</a>, <a href="/tag/debugging/index.html">debugging</a>
      
    </span>
  </p>
</section>
<section>
  <p>
What follows is an LFE translation of Roberto Aloi's <a href="https://aloiroberto.wordpress.com/2009/02/23/tracing-erlang-functions/"><i>Tracing Erlang Functions</i></a>.
</p>

<p>
Tracing LFE functions for debugging purposes is quite simple.
</p>

<p>
Let's say you have the following module and want to trace one of its functions.
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="math">(defmodule maths
  (export (sum 2) (diff 2)))

(defun sum (a b) (+ a b))

(defun diff (a b) (- a b))
</pre>
</div>

<p>
Before we get started, make sure you compile the <code>maths</code> module:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="compile-maths">(c "/path/to/maths.lfe")
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">(#(module maths))
</pre>
</div>

<p>
Just start the tracer:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="start-the-tracer">(dbg:tracer)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">#(ok &lt;0.46.0&gt;)
</pre>
</div>

<p>
Tell the tracer you are interested in all calls for all processes:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="all-calls-for-all-processes">(dbg:p 'all 'c)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">#(ok (#(matched nonode@nohost 26)))
</pre>
</div>

<p>
Finally, tell it you want to trace the function, <code>sum</code>, from the <code>maths</code> module:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="trace-maths:sum/2">(dbg:tpl 'maths 'sum [])
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1)))
</pre>
</div>

<p>
Now, try to call the function, as usual. The tracer is active!
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="call-maths:sum/2">(maths:sum 2 3)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">5
(&lt;0.29.0&gt;) call maths:sum(2,3)
</pre>
</div>

<p>
To trace all functions from the <code>maths</code> module:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="trace-all-functions-from-the-maths-module">&gt; (dbg:tpl 'maths [])
</pre>
</div>

<p>
To trace the return value for a given function:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="trace-return-values">(dbg:tpl 'maths 'sum (match-spec ([_] (return_trace))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1) #(saved 1)))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe" id="return_trace-example">(maths:sum 19 23)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">42
(&lt;0.56.0&gt;) call maths:sum(19,23)
(&lt;0.56.0&gt;) returned from maths:sum/2 -&gt; 42
</pre>
</div>

<p>
To stop the trace:
</p>
<div class="org-src-container">

<pre class="src src-lfe" id="stop-the-trace">(dbg:stop)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-lfe">ok
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>lfe-rebar3/compile updates</title>
    <link href="http://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html" />
    <id>http://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html</id>
    <published>2016-02-11T00:00:00Z</published>
    <updated>2016-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 11 February, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/erlang/index.html">erlang</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/rebar3/index.html">rebar3</a>, <a href="/tag/tooling/index.html">tooling</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Since much of my time these days is spent <code>(or 'writing 'developing
'evangelizing)</code> <a href="http://lfe.io">LFE</a>, it should come as no surprise that I use the <a href="https://github.com/lfe-rebar3/compile">rebar3
compiler plugin</a> extensively. In doing so, I noticed it always recompiles every
<code>.lfe</code> file it finds, irrespective of the staleness of the corresponding <code>.beam</code>
file. Having <a href="https://www.rebar3.org/docs/basic-usage#building">compiled</a> a fair amount of vanilla Erlang via <code>rebar3</code>, I knew it
didn't have to be that way.
</p>

<p>
To further my quest, <a href="https://github.com/tsloughter">tristan__</a> pointed me to <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L45-L48">run/7</a>, specifically its use of
<code>[check_last_mod]</code>. Before I <a href="https://github.com/quasiquoting/lfe-compile">forked</a> <a href="https://github.com/lfe-rebar3/compile">lfe-rebar3/compile</a>, it was using <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L41-L43">run/4</a>,
which does <b>NOT</b> make use of <code>[check_last_mod]</code>, hence the unnecessary
recompilation.
</p>

<p>
<a href="https://github.com/lfe-rebar3/compile/blob/0.2.1/src/lr3_comp.erl#L74">lfe-rebar3/compile/src/lr3_comp.erl:74</a>
</p>
<div class="org-src-container">

<pre class="src src-erlang"><span style="color: #92a65e; font-weight: bold;">rebar_base_compiler</span>:<span style="color: #92a65e; font-weight: bold;">run</span>(<span style="color: #cae682;">Opts</span>, [], <span style="color: #cae682;">Files</span>, <span style="color: #cae682;">DoCompile</span>).
</pre>
</div>

<p>
After some experimentation, and <a href="https://www.rebar3.org/docs/dependencies#checkout-dependencies">_checkouts</a> symlinking tricks, I came up with an
appropriate <code>run/7</code> incantation and made <a href="https://github.com/lfe-rebar3/compile/pull/5">a pull request</a>.
</p>

<p>
<a href="https://github.com/quasiquoting/lfe-compile/blob/0.3.0/src/lr3_comp.erl#L37-L39">quasiquoting/lfe-compile/src/lr3_comp.erl:37-39</a>
</p>
<div class="org-src-container">

<pre class="src src-erlang"><span style="color: #92a65e; font-weight: bold;">rebar_base_compiler</span>:<span style="color: #92a65e; font-weight: bold;">run</span>(<span style="color: #cae682;">Config</span>, <span style="color: #cae682;">FirstFiles</span>,
                        <span style="color: #cae682;">SourceDir</span>, <span style="color: #95e454;">".lfe"</span>, <span style="color: #cae682;">TargetDir</span>, <span style="color: #95e454;">".beam"</span>,
                        <span style="color: #8ac6f2; font-weight: bold;">fun</span> <span style="color: #92a65e; font-weight: bold;">compile/3</span>).
</pre>
</div>

<p>
With those changes, <code>rebar3 lfe compile</code> will now skip unmodified <code>.lfe</code>
files. Not only is this The Right Thing™ to do, but it should be <a href="https://xkcd.com/1205/">time saver</a> in
the long run.
</p>

<p>
Here's an example of the difference when compiling <a href="https://github.com/quasiquoting/lodox">Lodox</a>&#x2026;
</p>

<p>
&#x2026; using <code>run/4</code> via <a href="https://github.com/lfe-rebar3/compile/releases/tag/0.2.1">0.2.1</a>:
</p>
<div class="org-src-container">

<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example">
 ~~&gt;    Compiling ./src/lodox-html-writer.lfe ...
 ~~&gt;    Compiling ./src/lodox-p.lfe ...
 ~~&gt;    Compiling ./src/lodox-parse.lfe ...
 ~~&gt;    Compiling ./src/lodox-util.lfe ...
 ~~&gt;    Compiling ./src/lodox.lfe ...
 ~~&gt;    Compiling ./src/pandoc.lfe ...
 ~~&gt;    Compiling ./test/unit-lodox-tests.lfe ...
        1.39 real         1.14 user         0.24 sys
</pre>

<p>
&#x2026; using <code>run/7</code> via <a href="https://github.com/quasiquoting/lfe-compile/releases/tag/0.3.0">0.3.0</a>:
</p>
<div class="org-src-container">

<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example">
        0.94 real         0.73 user         0.20 sys
</pre>

<p>
A little more :cow::poop: microbenchmarking on a proprietary work project:
</p>
<div class="org-src-container">

<pre class="src src-bash"># run/4
        3.58 real         3.02 user         0.58 sys

# run/7
        1.83 real         1.46 user         0.35 sys
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>So 2016. Much BEAM. Very polyglot.</title>
    <link href="http://blorg.ericb.me/2016/01/so-2016-much-beam-very-polyglot/index.html" />
    <id>http://blorg.ericb.me/2016/01/so-2016-much-beam-very-polyglot/index.html</id>
    <published>2016-01-01T00:00:00Z</published>
    <updated>2016-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  1 January, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/elixir/index.html">elixir</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/polyglot/index.html">polyglot</a>
      
    </span>
  </p>
</section>
<section>
  <pre>
<p>
(→ This (is (why (→ I (love <a href="http://lfe.io">Lisp Flavoured Erlang</a>)))))
</p>
</pre>

<a href="https://github.com/yurrriq/blorg/blob/master/code/so-2016.lfe">
<div class="org-src-container">

<pre class="src src-lfe">(progn
  (include-lib "clj/include/compose.lfe") ; Clojure threading macros
  (-&gt; (lodox-parse:docs #"lodox")         ; lodox docs map, generated by lodox
      (mref 'modules)                     ; lodox modules (Maclisp)
      (cadddr)                            ; 4th module =:= lodox-parse (CL)
      (mref 'exports)                     ; lodox-parse exports (Maclisp)
      (hd)                                ; first function =:= docs/1 (Erlang)
      (mref 'doc)                         ; docstring of docs/1
      (list_to_binary)                    ; string-&gt;binary
      (Elixir.Markdown:to_html            ; Elixir app wrapping C lib
       '[#(fenced_code true)])))          ; as in GitHub Flavored Markdown
</pre>
</div>
</a>

<p>
Gott nytt år!
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">References</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://github.com/lfex/clj#future-">clj: Clojure functions and macros for LFE</a>
</li>
<li><a href="https://github.com/quasiquoting/lodox">Lodox: Like Codox for LFE</a>
</li>
<li><a href="http://www.maclisp.info/pitmanual/index.html">The Revised Maclisp Manual</a>
</li>
<li><a href="http://quasiquoting.org/lodox/lodox-parse.html#func-docs.2F1">lodox-parse:docs/1</a>
</li>
<li><a href="http://learnyousomeerlang.com/starting-out-for-real#lists">Learn You Some Erlang: Lists!</a>
</li>
<li><a href="https://github.com/devinus/markdown">Markdown: A simple Elixir Markdown to HTML conversion library</a>
</li>
<li><a href="https://github.com/hoedown/hoedown">Hoedown: Standard C99 Markdown parser</a>
</li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks">GitHub Flavored Markdown: Fenced code blocks</a>
</li>
</ul>
</div>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Matching strings in LFE patterns</title>
    <link href="http://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html" />
    <id>http://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html</id>
    <published>2015-12-28T00:00:00Z</published>
    <updated>2015-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 28 December, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/pattern-matching/index.html">pattern-matching</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
While writing an LFE solution for <a href="http://adventofcode.com/day/6">Day 6 of Advent of Code</a>, I found myself
wanting to write <code>parse_instruction/1</code> like this:
</p>
<div class="org-src-container">

<pre class="src src-erlang"><span style="color: #cae682;">parse_instruction</span>(<span style="color: #95e454;">"toggle "</span> ++ <span style="color: #cae682;">Rest</span>) -&gt;<span style="color: #cae682;"> </span><span style="color: #92a65e; font-weight: bold;">toggle</span>(<span style="color: #92a65e; font-weight: bold;">parse_coordinates</span>(<span style="color: #cae682;">Rest</span>));
<span style="color: #cae682;">parse_instruction</span>(<span style="color: #95e454;">"turn on "</span> ++ <span style="color: #cae682;">Rest</span>) -&gt;<span style="color: #cae682;"> </span><span style="color: #92a65e; font-weight: bold;">turn_on</span>(<span style="color: #92a65e; font-weight: bold;">parse_coordinates</span>(<span style="color: #cae682;">Rest</span>));
<span style="color: #cae682;">parse_instruction</span>(<span style="color: #95e454;">"turn off "</span> ++ <span style="color: #cae682;">Rest</span>) -&gt;<span style="color: #cae682;"> </span><span style="color: #92a65e; font-weight: bold;">turn_off</span>(<span style="color: #92a65e; font-weight: bold;">parse_coordinates</span>(<span style="color: #cae682;">Rest</span>)).

<span style="color: #cae682;">parse_coordinates</span>(<span style="color: #cae682;">String</span>) -&gt;
  {ok,[<span style="color: #cae682;">X0</span>,<span style="color: #cae682;">Y0</span>,<span style="color: #cae682;">X1</span>,<span style="color: #cae682;">Y2</span>],[]} = <span style="color: #92a65e; font-weight: bold;">io_lib</span>:<span style="color: #92a65e; font-weight: bold;">fread</span>(<span style="color: #95e454;">"~d,~d through ~d,~d"</span>, <span style="color: #cae682;">String</span>),
  {{<span style="color: #cae682;">X0</span>,<span style="color: #cae682;">Y0</span>},{<span style="color: #cae682;">X1</span>,<span style="color: #cae682;">Y1</span>}}.

<span style="color: #cae682;">toggle</span>({{<span style="color: #cae682;">X0</span>,<span style="color: #cae682;">Y0</span>},{<span style="color: #cae682;">X1</span>,<span style="color: #cae682;">Y1</span>}}) -&gt;<span style="color: #cae682;"> </span>undefined.
<span style="color: #cae682;">turn_on</span>({{<span style="color: #cae682;">X0</span>,<span style="color: #cae682;">Y0</span>},{<span style="color: #cae682;">X1</span>,<span style="color: #cae682;">Y1</span>}}) -&gt;<span style="color: #cae682;"> </span>undefined.
<span style="color: #cae682;">turn_off</span>({{<span style="color: #cae682;">X0</span>,<span style="color: #cae682;">Y0</span>},{<span style="color: #cae682;">X1</span>,<span style="color: #cae682;">Y1</span>}}) -&gt;<span style="color: #cae682;"> </span>undefined.
</pre>
</div>

<p>
But the literal LFE translation <a href="https://github.com/rvirding/lfe/issues/176">doesn't work as desired</a>.
</p>
<div class="org-src-container">

<pre class="src src-lfe">(defun parse-instruction
  ([(++ "turn off " rest)]
   ...))
</pre>
</div>

<p>
Instead, invocation of a <code>defun</code> of that form throws a <code>function_clause</code> error.
</p>
<div class="org-src-container">

<pre class="src src-lfe">&gt; (defun f ([(++ "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
exception error: function_clause
</pre>
</div>

<p>
After this discovery, I took to <a href="http://webchat.freenode.net/?channels=erlang-lisp">#erlang-lisp</a> and tried to figure out why.
Discussing the issue with <code>@rvirding</code> for a few minutes, we decided adding <code>++*</code>
and having patterns like <code>(++* "prefix" suffix)</code> expand to nested <code>cons</code>-es was
a solid approach.
</p>

<p>
N.B. In <a href="https://github.com/rvirding/lfe/releases/tag/v0.10.1">v0.10.1</a>, <code>exp_append/1</code> had the following <a href="https://github.com/rvirding/lfe/blob/v0.10.1/src/lfe_macro.erl#L911-L912">clause</a>, commented out.
</p>
<div class="org-src-container">

<pre class="src src-erlang"><span style="color: #99968b;">%% </span><span style="color: #99968b;">Cases with lists of numbers (strings).</span>
[[<span style="color: #cae682;">N</span>|<span style="color: #cae682;">Ns</span>]|<span style="color: #cae682;">Es</span>] <span style="color: #8ac6f2; font-weight: bold;">when</span> <span style="color: #e5786d;">is_number</span>(<span style="color: #cae682;">N</span>) -&gt;<span style="color: #cae682;"> </span>[cons,<span style="color: #cae682;">N</span>,[<span style="color: #95e454;">'++'</span>,<span style="color: #cae682;">Ns</span>|<span style="color: #cae682;">Es</span>]];
</pre>
</div>

<p>
Rather than take the overly complicated approach of counting and limiting the
number of expanded <code>cons</code>-es and bottoming out to a call to <code>erlang:++</code>, we
decided to <a href="http://www.catb.org/jargon/html/K/KISS-Principle.html">keep it simple</a> and just let <code>++*</code> patterns do their own thing.
</p>

<p>
The <a href="https://github.com/rvirding/lfe/compare/b867573e9d144988b5bc70bfe00aa08b27b3a7d6...a5d7c23ebd3005d4f9ff8714d8e02f06aa2d6abe">solution</a> we came up with is as follows:
</p>
<div class="org-src-container">

<pre class="src src-erlang"><span style="color: #99968b;">%% </span><span style="color: #99968b;">exp_predef(...) -&gt; ...;</span>
<span style="color: #cae682;">exp_predef</span>([<span style="color: #95e454;">'++*'</span>|<span style="color: #cae682;">Abody</span>], <span style="color: #cae682;">_</span>, <span style="color: #cae682;">St</span>) -&gt;
  <span style="color: #cae682;">Exp</span> = <span style="color: #92a65e; font-weight: bold;">exp_prefix</span>(<span style="color: #cae682;">Abody</span>),
  {yes,<span style="color: #cae682;">Exp</span>,<span style="color: #cae682;">St</span>};
<span style="color: #99968b;">%% </span><span style="color: #99968b;">exp_predef(...) -&gt; ....</span>

<span style="color: #cae682;">exp_prefix</span>([[<span style="color: #cae682;">N</span>|<span style="color: #cae682;">Ns</span>]|<span style="color: #cae682;">Es</span>]) <span style="color: #8ac6f2; font-weight: bold;">when</span> <span style="color: #e5786d;">is_number</span>(<span style="color: #cae682;">N</span>) -&gt;<span style="color: #cae682;"> </span>[cons,<span style="color: #cae682;">N</span>,[<span style="color: #95e454;">'++*'</span>,<span style="color: #cae682;">Ns</span>|<span style="color: #cae682;">Es</span>]];
<span style="color: #cae682;">exp_prefix</span>([[]|<span style="color: #cae682;">Es</span>]) -&gt;<span style="color: #cae682;"> </span>[<span style="color: #95e454;">'++*'</span>|<span style="color: #cae682;">Es</span>];
<span style="color: #cae682;">exp_prefix</span>(<span style="color: #cae682;">Args</span>) -&gt;<span style="color: #cae682;"> </span><span style="color: #92a65e; font-weight: bold;">exp_append</span>(<span style="color: #cae682;">Args</span>).
</pre>
</div>

<p>
Now in the <a href="https://github.com/rvirding/lfe/tree/develop">develop</a> branch, you can do the following:
</p>
<div class="org-src-container">

<pre class="src src-lfe">&gt; (defun f ([(++* "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

<p>
or even:
</p>
<div class="org-src-container">

<pre class="src src-lfe">&gt; (defun f ([(++* "p" "r" "e" "f" "i" "x" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>werase in iTerm2</title>
    <link href="http://blorg.ericb.me/2015/09/werase-in-iterm2/index.html" />
    <id>http://blorg.ericb.me/2015/09/werase-in-iterm2/index.html</id>
    <published>2015-09-09T00:00:00Z</published>
    <updated>2015-09-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  9 September, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/osx/index.html">osx</a>, <a href="/tag/hack/index.html">hack</a>, <a href="/tag/terminal/index.html">terminal</a>, <a href="/tag/productivity/index.html">productivity</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Using a fresh install of <a href="https://www.iterm2.com">iTerm2</a>, I found that <code>⌥⌫</code> wasn't working as
expected. Within minutes, I noticed a <b>significant</b> decrease in productivity,
since (apparently) I use <code>werase</code> all the time.
</p>

<p>
Without further ado, here's the time-saving fix I settled on.
</p>

<p>
<img src="/images/werase.png" alt="nil" />
</p>

<p>
Shout out to to <a href="https://manytricks.com/keycodes/">Key Codes</a> (and <a href="http://brew.sh">Homebrew</a>) for making it easy to find the
appropriate hex code.
</p>

<div class="org-src-container">

<pre class="src src-sh">brew cask install key-codes
</pre>
</div>

</section>
]]></summary>
</entry>

</feed>
