<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - lfe</title>
    <link href="https://blorg.ericb.me/tag/lfe.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/lfe.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>18 December, 2023</updated>
    <entry>
    <title>Tracing LFE Functions</title>
    <link href="https://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html" />
    <id>https://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html</id>
    <published>2016-04-12T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 12 April, 2016
      
      <br />
      Updated on 18 December, 2023
      
      
      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html">lisp</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html">beam</a>, <a title="All pages tagged &#39;tracing&#39;." href="/tag/tracing/index.html">tracing</a>, <a title="All pages tagged &#39;debugging&#39;." href="/tag/debugging/index.html">debugging</a>
      
    </span>
  </p>
</section>
<section>
  <p>
What follows is an LFE translation of Roberto Aloi's <a href="https://web.archive.org/web/20150906072604/https://aloiroberto.wordpress.com/2009/02/23/tracing-erlang-functions/"><i>Tracing Erlang Functions</i></a>.
</p>

<p>
Tracing LFE functions for debugging purposes is quite simple.
</p>

<p>
Let's say you have the following module and want to trace one of its functions.
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org616e3f0">(<span style="font-weight: bold;">defmodule</span> <span style="font-weight: bold; text-decoration: underline;">maths</span>
  (export (sum 2) (diff 2)))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">sum</span> (a b) (<span style="font-weight: bold;">+</span> a b))

(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">diff</span> (a b) (<span style="font-weight: bold;">-</span> a b))
</pre>
</div>

<p>
Before we get started, make sure you compile the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org4b1dc3d">(c <span style="font-style: italic;">"/path/to/maths.lfe"</span>)
</pre>
</div>

<p>
Just start the tracer:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org3499bbc">(dbg:tracer)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok &lt;0.46.0&gt;)
</pre>
</div>

<p>
Tell the tracer you are interested in all calls for all processes:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgeadd3be">(dbg:p 'all 'c)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 26)))
</pre>
</div>

<p>
Finally, tell it you want to trace the function, <code>sum</code>, from the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgdaabc0f">(dbg:tpl 'maths 'sum [])
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1)))
</pre>
</div>

<p>
Now, try to call the function, as usual. The tracer is active!
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgcbc9cb7">(maths:sum 2 3)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">5
(&lt;0.29.0&gt;) call maths:sum(2,3)
</pre>
</div>

<p>
To trace all functions from the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orga71ca6a">&gt; (dbg:tpl 'maths [])
</pre>
</div>

<p>
To trace the return value for a given function:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org75a5bf7">(dbg:tpl 'maths 'sum (<span style="font-weight: bold;">match-spec</span> ([_] (return_trace))))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1) #(saved 1)))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe" id="org11fa093">(maths:sum 19 23)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">42
(&lt;0.56.0&gt;) call maths:sum(19,23)
(&lt;0.56.0&gt;) returned from maths:sum/2 -&gt; 42
</pre>
</div>

<p>
To stop the trace:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org998327e">(dbg:stop)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">ok
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>lfe-rebar3/compile updates</title>
    <link href="https://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html" />
    <id>https://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html</id>
    <published>2016-02-11T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 11 February, 2016
      
      <br />
      Updated on 18 December, 2023
      
      
      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html">lisp</a>, <a title="All pages tagged &#39;erlang&#39;." href="/tag/erlang/index.html">erlang</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html">beam</a>, <a title="All pages tagged &#39;rebar3&#39;." href="/tag/rebar3/index.html">rebar3</a>, <a title="All pages tagged &#39;tooling&#39;." href="/tag/tooling/index.html">tooling</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Since much of my time these days is spent <code class="src src-lfe">(or 'writing 'developing 'evangelizing)</code> <a href="http://lfe.io">LFE</a>, it should come as no surprise that I use the <a href="https://github.com/lfe-rebar3/compile">rebar3
compiler plugin</a> extensively. In doing so, I noticed it always recompiles every
<code>.lfe</code> file it finds, irrespective of the staleness of the corresponding <code>.beam</code>
file. Having <a href="https://www.rebar3.org/docs/basic-usage#building">compiled</a> a fair amount of vanilla Erlang via <code>rebar3</code>, I knew it
didn't have to be that way.
</p>

<section id="outline-container-org0c861a3" class="outline-2">
<h2 id="org0c861a3">Replacing <code>run/4</code> with <code>run/7</code></h2>
<div class="outline-text-2" id="text-org0c861a3">
<p>
To further my quest, <a href="https://github.com/tsloughter">Tristan</a> pointed me to <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L45-L48">run/7</a>, specifically its use of
<code class="src src-erlang">[check_last_mod]</code>. Before I <a href="https://github.com/quasiquoting/lfe-compile">forked</a> <a href="https://github.com/lfe-rebar3/compile">lfe-rebar3/compile</a>, it was using
<a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L41-L43">run/4</a>, which does <b>NOT</b> make use of <code class="src src-erlang">[check_last_mod]</code>, hence the
unnecessary recompilation.
</p>

<p>
<a href="https://github.com/lfe-rebar3/compile/blob/0.2.1/src/lr3_comp.erl#L74">lfe-rebar3/compile/src/lr3_comp.erl:74</a>
</p>
<div class="org-src-container">
<pre class="src src-erlang"><span style="font-weight: bold; text-decoration: underline;">rebar_base_compiler</span>:<span style="font-weight: bold; text-decoration: underline;">run</span>(<span style="font-weight: bold; font-style: italic;">Opts</span>, [], <span style="font-weight: bold; font-style: italic;">Files</span>, <span style="font-weight: bold; font-style: italic;">DoCompile</span>).
</pre>
</div>

<p>
After some experimentation, and <a href="https://www.rebar3.org/docs/dependencies#checkout-dependencies">_checkouts</a> symlinking tricks, I came up with an
appropriate <code>run/7</code> incantation and made <a href="https://github.com/lfe-rebar3/compile/pull/5">a pull request</a>.
</p>

<p>
<a href="https://github.com/quasiquoting/lfe-compile/blob/0.3.0/src/lr3_comp.erl#L37-L39">quasiquoting/lfe-compile/src/lr3_comp.erl:37-39</a>
</p>
<div class="org-src-container">
<pre class="src src-erlang"><span style="font-weight: bold; text-decoration: underline;">rebar_base_compiler</span>:<span style="font-weight: bold; text-decoration: underline;">run</span>(<span style="font-weight: bold; font-style: italic;">Config</span>, <span style="font-weight: bold; font-style: italic;">FirstFiles</span>,
                        <span style="font-weight: bold; font-style: italic;">SourceDir</span>, <span style="font-style: italic;">".lfe"</span>, <span style="font-weight: bold; font-style: italic;">TargetDir</span>, <span style="font-style: italic;">".beam"</span>,
                        <span style="font-weight: bold;">fun</span> <span style="font-weight: bold; text-decoration: underline;">compile/3</span>).
</pre>
</div>

<p>
With those changes, <code>rebar3 lfe compile</code> will now skip unmodified <code>.lfe</code>
files. Not only is this The Right Thing™ to do, but it should be <a href="https://xkcd.com/1205/">time saver</a> in
the long run.
</p>
</div>
</section>

<section id="outline-container-orged159db" class="outline-2">
<h2 id="orged159db">Examples of time saving</h2>
<div class="outline-text-2" id="text-orged159db">
<p>
Here's an example of the difference when compiling <a href="https://github.com/quasiquoting/lodox">Lodox</a>&#x2026;
</p>

<p>
&#x2026; using <code>run/4</code> via <a href="https://github.com/lfe-rebar3/compile/releases/tag/0.2.1">0.2.1</a>:
</p>
<div class="org-src-container">
<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example" id="org46544c6">
~~&gt;    Compiling ./src/lodox-html-writer.lfe ...
~~&gt;    Compiling ./src/lodox-p.lfe ...
~~&gt;    Compiling ./src/lodox-parse.lfe ...
~~&gt;    Compiling ./src/lodox-util.lfe ...
~~&gt;    Compiling ./src/lodox.lfe ...
~~&gt;    Compiling ./src/pandoc.lfe ...
~~&gt;    Compiling ./test/unit-lodox-tests.lfe ...
       1.39 real         1.14 user         0.24 sys
</pre>

<p>
&#x2026; using <code>run/7</code> via <a href="https://github.com/quasiquoting/lfe-compile/releases/tag/0.3.0">0.3.0</a>:
</p>
<div class="org-src-container">
<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example" id="orgc4e6197">
0.94 real         0.73 user         0.20 sys
</pre>

<p>
A little more 🐄💩 microbenchmarking on a proprietary work project:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">run/4</span>
        3.58 real         3.02 user         0.58 sys
</pre>
</div>

<div class="org-src-container">
<pre class="src src-bash"><span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">run/7</span>
        1.83 real         1.46 user         0.35 sys
</pre>
</div>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>So 2016. Much BEAM. Very polyglot.</title>
    <link href="https://blorg.ericb.me/2016/01/so-2016-much-beam-very-polyglot/index.html" />
    <id>https://blorg.ericb.me/2016/01/so-2016-much-beam-very-polyglot/index.html</id>
    <published>2016-01-01T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  1 January, 2016
      
      <br />
      Updated on 18 December, 2023
      
      
      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html">lisp</a>, <a title="All pages tagged &#39;elixir&#39;." href="/tag/elixir/index.html">elixir</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html">beam</a>, <a title="All pages tagged &#39;polyglot&#39;." href="/tag/polyglot/index.html">polyglot</a>
      
    </span>
  </p>
</section>
<section>
  <p>
This is why I love <a href="https://lfe.io">Lisp Flavoured Erlang</a>.
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 1: </span><a href="https://github.com/yurrriq/blorg/blob/main/code/so-2016.lfe">so-2016.lfe</a></label><pre class="src src-lfe">(<span style="font-weight: bold;">progn</span>
  (include-lib <span style="font-style: italic;">"clj/include/compose.lfe"</span>) <span style="font-weight: bold; font-style: italic;">; Clojure threading macros</span>
  (-&gt; (lodox-parse:docs #<span style="font-style: italic;">"lodox"</span>)         <span style="font-weight: bold; font-style: italic;">; lodox docs map, generated by lodox</span>
      (<span style="font-weight: bold;">mref</span> 'modules)                     <span style="font-weight: bold; font-style: italic;">; lodox modules (Maclisp)</span>
      (cadddr)                            <span style="font-weight: bold; font-style: italic;">; 4th module =:= lodox-parse (CL)</span>
      (<span style="font-weight: bold;">mref</span> 'exports)                     <span style="font-weight: bold; font-style: italic;">; lodox-parse exports (Maclisp)</span>
      (<span style="font-weight: bold;">hd</span>)                                <span style="font-weight: bold; font-style: italic;">; first function =:= docs/1 (Erlang)</span>
      (<span style="font-weight: bold;">mref</span> 'doc)                         <span style="font-weight: bold; font-style: italic;">; docstring of docs/1</span>
      (list_to_binary)                    <span style="font-weight: bold; font-style: italic;">; string-&gt;binary</span>
      (Elixir.Markdown:to_html            <span style="font-weight: bold; font-style: italic;">; Elixir app wrapping C lib</span>
       '[#(fenced_code true)])))          <span style="font-weight: bold; font-style: italic;">; as in GitHub Flavored Markdown</span>
</pre>
</div>

<p>
Gott nytt år! <label for='mn-auto.2365250' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.2365250' class='margin-toggle'><span class='marginnote'> <a href="https://en.wiktionary.org/wiki/gott_nytt_%C3%A5r">https://en.wiktionary.org/wiki/gott_nytt_%C3%A5r</a> </span>
</p>

<section id="outline-container-org2f8fdbd" class="outline-2">
<h2 id="org2f8fdbd">References</h2>
<div class="outline-text-2" id="text-org2f8fdbd">
<ul class="org-ul">
<li><a href="https://github.com/lfe/lfe/blob/develop/include/clj.lfe">clj: Clojure functions and macros for LFE</a></li>
<li><a href="https://github.com/lfe-rebar3/lodox">Lodox: Like Codox for LFE</a></li>
<li><a href="http://www.maclisp.info/pitmanual/index.html">The Revised Maclisp Manual</a></li>
<li><a href="https://lfe-rebar3.github.io/lodox/lodox-parse.html#export-docs.2F1">lodox-parse:docs/1</a></li>
<li><a href="http://learnyousomeerlang.com/starting-out-for-real#lists">Learn You Some Erlang: Lists!</a></li>
<li><a href="https://github.com/devinus/markdown">Markdown: A simple Elixir Markdown to HTML conversion library</a></li>
<li><a href="https://github.com/hoedown/hoedown">Hoedown: Standard C99 Markdown parser</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks">GitHub Flavored Markdown: Fenced code blocks</a></li>
</ul>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>Matching strings in LFE patterns</title>
    <link href="https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html" />
    <id>https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html</id>
    <published>2015-12-28T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 28 December, 2015
      
      <br />
      Updated on 18 December, 2023
      
      
      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html">lisp</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html">beam</a>, <a title="All pages tagged &#39;pattern-matching&#39;." href="/tag/pattern-matching/index.html">pattern-matching</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
While writing an LFE solution for <a href="https://adventofcode.com/2015/day/6">Day 6 of Advent of Code</a>, I found myself
wanting to write <code>parse_instruction/1</code> like this:
</p>
<div class="org-src-container">
<pre class="src src-erlang"><span style="font-weight: bold;">parse_instruction</span>(<span style="font-style: italic;">"toggle "</span> ++ <span style="font-weight: bold; font-style: italic;">Rest</span>) -&gt;<span style="font-weight: bold;"> </span><span style="font-weight: bold; text-decoration: underline;">toggle</span>(<span style="font-weight: bold; text-decoration: underline;">parse_coordinates</span>(<span style="font-weight: bold; font-style: italic;">Rest</span>));
<span style="font-weight: bold;">parse_instruction</span>(<span style="font-style: italic;">"turn on "</span> ++ <span style="font-weight: bold; font-style: italic;">Rest</span>) -&gt;<span style="font-weight: bold;"> </span><span style="font-weight: bold; text-decoration: underline;">turn_on</span>(<span style="font-weight: bold; text-decoration: underline;">parse_coordinates</span>(<span style="font-weight: bold; font-style: italic;">Rest</span>));
<span style="font-weight: bold;">parse_instruction</span>(<span style="font-style: italic;">"turn off "</span> ++ <span style="font-weight: bold; font-style: italic;">Rest</span>) -&gt;<span style="font-weight: bold;"> </span><span style="font-weight: bold; text-decoration: underline;">turn_off</span>(<span style="font-weight: bold; text-decoration: underline;">parse_coordinates</span>(<span style="font-weight: bold; font-style: italic;">Rest</span>)).

<span style="font-weight: bold;">parse_coordinates</span>(<span style="font-weight: bold; font-style: italic;">String</span>) -&gt;
  {ok,[<span style="font-weight: bold; font-style: italic;">X0</span>,<span style="font-weight: bold; font-style: italic;">Y0</span>,<span style="font-weight: bold; font-style: italic;">X1</span>,<span style="font-weight: bold; font-style: italic;">Y2</span>],[]} = <span style="font-weight: bold; text-decoration: underline;">io_lib</span>:<span style="font-weight: bold; text-decoration: underline;">fread</span>(<span style="font-style: italic;">"~d,~d through ~d,~d"</span>, <span style="font-weight: bold; font-style: italic;">String</span>),
  {{<span style="font-weight: bold; font-style: italic;">X0</span>,<span style="font-weight: bold; font-style: italic;">Y0</span>},{<span style="font-weight: bold; font-style: italic;">X1</span>,<span style="font-weight: bold; font-style: italic;">Y1</span>}}.

<span style="font-weight: bold;">toggle</span>({{<span style="font-weight: bold; font-style: italic;">X0</span>,<span style="font-weight: bold; font-style: italic;">Y0</span>},{<span style="font-weight: bold; font-style: italic;">X1</span>,<span style="font-weight: bold; font-style: italic;">Y1</span>}}) -&gt;<span style="font-weight: bold;"> </span>undefined.
<span style="font-weight: bold;">turn_on</span>({{<span style="font-weight: bold; font-style: italic;">X0</span>,<span style="font-weight: bold; font-style: italic;">Y0</span>},{<span style="font-weight: bold; font-style: italic;">X1</span>,<span style="font-weight: bold; font-style: italic;">Y1</span>}}) -&gt;<span style="font-weight: bold;"> </span>undefined.
<span style="font-weight: bold;">turn_off</span>({{<span style="font-weight: bold; font-style: italic;">X0</span>,<span style="font-weight: bold; font-style: italic;">Y0</span>},{<span style="font-weight: bold; font-style: italic;">X1</span>,<span style="font-weight: bold; font-style: italic;">Y1</span>}}) -&gt;<span style="font-weight: bold;"> </span>undefined.
</pre>
</div>

<section id="outline-container-org5794d3a" class="outline-2">
<h2 id="org5794d3a">Trying it out</h2>
<div class="outline-text-2" id="text-org5794d3a">
<p>
But the literal LFE translation <a href="https://github.com/rvirding/lfe/issues/176">doesn't work as desired</a>.
</p>
<div class="org-src-container">
<pre class="src src-lfe">(<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">parse-instruction</span>
  ([(<span style="font-weight: bold;">++</span> <span style="font-style: italic;">"turn off "</span> rest)]
   ...))
</pre>
</div>

<p>
<label for="mn-exp_append-before" class="margin-toggle">&#8853;</label>
<input type="checkbox" id="mn-exp_append-before" class="margin-toggle"/>
<span class="marginnote">
N.B. In <a href="https://github.com/rvirding/lfe/releases/tag/v0.10.1">v0.10.1</a>, <code>exp_append/1</code> had the following <a href="https://github.com/rvirding/lfe/blob/v0.10.1/src/lfe_macro.erl#L911-L912">clause</a>, commented out.<br/>
<code class="src src-erlang"><span style="font-weight: bold; font-style: italic;">%% </span><span style="font-weight: bold; font-style: italic;">Cases with lists of numbers (strings).</span></code><br/>
<code class="src src-erlang">[[<span style="font-weight: bold; font-style: italic;">N</span>|<span style="font-weight: bold; font-style: italic;">Ns</span>]|<span style="font-weight: bold; font-style: italic;">Es</span>] <span style="font-weight: bold;">when</span> <span style="font-weight: bold;">is_number</span>(<span style="font-weight: bold; font-style: italic;">N</span>) -&gt;<span style="font-weight: bold;"> </span>[cons,<span style="font-weight: bold; font-style: italic;">N</span>,[<span style="font-style: italic;">'++'</span>,<span style="font-weight: bold; font-style: italic;">Ns</span>|<span style="font-weight: bold; font-style: italic;">Es</span>]];</code>
</span>
</p>

<p>
Instead, invocation of a <code>defun</code> of that form throws a <code>function_clause</code> error.
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">f</span> ([(<span style="font-weight: bold;">++</span> <span style="font-style: italic;">"prefix"</span> suffix)] suffix))
f
&gt; (f <span style="font-style: italic;">"prefixsuffix"</span>)
exception error: function_clause
</pre>
</div>
</div>
</section>

<section id="outline-container-org9f95e8e" class="outline-2">
<h2 id="org9f95e8e">Adding <code>++*</code> patterns to LFE</h2>
<div class="outline-text-2" id="text-org9f95e8e">
<p>
After this discovery, I took to <a href="http://webchat.freenode.net/?channels=erlang-lisp">#erlang-lisp</a> and tried to figure out why.
Discussing the issue with <code>@rvirding</code> for a few minutes, we decided adding <code>++*</code>
and having patterns like <code>(++* "prefix" suffix)</code> expand to nested <code>cons</code>-es was
a solid approach.
</p>

<p>
Rather than take the overly complicated approach of counting and limiting the
number of expanded <code>cons</code>-es and bottoming out to a call to <code>erlang:++</code>, we
decided to <a href="http://www.catb.org/jargon/html/K/KISS-Principle.html">keep it simple</a> and just let <code>++*</code> patterns do their own thing.
</p>

<p>
The <a href="https://github.com/rvirding/lfe/compare/b867573e9d144988b5bc70bfe00aa08b27b3a7d6...a5d7c23ebd3005d4f9ff8714d8e02f06aa2d6abe">solution</a> we came up with is as follows:
</p>
<div class="org-src-container">
<pre class="src src-erlang"><span style="font-weight: bold; font-style: italic;">%% </span><span style="font-weight: bold; font-style: italic;">exp_predef(...) -&gt; ...;</span>
<span style="font-weight: bold;">exp_predef</span>([<span style="font-style: italic;">'++*'</span>|<span style="font-weight: bold; font-style: italic;">Abody</span>], <span style="font-weight: bold; font-style: italic;">_</span>, <span style="font-weight: bold; font-style: italic;">St</span>) -&gt;
  <span style="font-weight: bold; font-style: italic;">Exp</span> = <span style="font-weight: bold; text-decoration: underline;">exp_prefix</span>(<span style="font-weight: bold; font-style: italic;">Abody</span>),
  {yes,<span style="font-weight: bold; font-style: italic;">Exp</span>,<span style="font-weight: bold; font-style: italic;">St</span>};
<span style="font-weight: bold; font-style: italic;">%% </span><span style="font-weight: bold; font-style: italic;">exp_predef(...) -&gt; ....</span>

<span style="font-weight: bold;">exp_prefix</span>([[<span style="font-weight: bold; font-style: italic;">N</span>|<span style="font-weight: bold; font-style: italic;">Ns</span>]|<span style="font-weight: bold; font-style: italic;">Es</span>]) <span style="font-weight: bold;">when</span> <span style="font-weight: bold;">is_number</span>(<span style="font-weight: bold; font-style: italic;">N</span>) -&gt;<span style="font-weight: bold;"> </span>[cons,<span style="font-weight: bold; font-style: italic;">N</span>,[<span style="font-style: italic;">'++*'</span>,<span style="font-weight: bold; font-style: italic;">Ns</span>|<span style="font-weight: bold; font-style: italic;">Es</span>]];
<span style="font-weight: bold;">exp_prefix</span>([[]|<span style="font-weight: bold; font-style: italic;">Es</span>]) -&gt;<span style="font-weight: bold;"> </span>[<span style="font-style: italic;">'++*'</span>|<span style="font-weight: bold; font-style: italic;">Es</span>];
<span style="font-weight: bold;">exp_prefix</span>(<span style="font-weight: bold; font-style: italic;">Args</span>) -&gt;<span style="font-weight: bold;"> </span><span style="font-weight: bold; text-decoration: underline;">exp_append</span>(<span style="font-weight: bold; font-style: italic;">Args</span>).
</pre>
</div>
</div>
</section>

<section id="outline-container-orgb192477" class="outline-2">
<h2 id="orgb192477">Usage</h2>
<div class="outline-text-2" id="text-orgb192477">
<p>
Now in the <a href="https://github.com/rvirding/lfe/tree/develop">develop</a> branch, you can do the following:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">f</span> ([(<span style="font-weight: bold;">++*</span> <span style="font-style: italic;">"prefix"</span> suffix)] suffix))
f
&gt; (f <span style="font-style: italic;">"prefixsuffix"</span>)
<span style="font-style: italic;">"suffix"</span>
</pre>
</div>

<p>
or even:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (<span style="font-weight: bold;">defun</span> <span style="font-weight: bold;">f</span> ([(<span style="font-weight: bold;">++*</span> <span style="font-style: italic;">"p"</span> <span style="font-style: italic;">"r"</span> <span style="font-style: italic;">"e"</span> <span style="font-style: italic;">"f"</span> <span style="font-style: italic;">"i"</span> <span style="font-style: italic;">"x"</span> suffix)] suffix))
f
&gt; (f <span style="font-style: italic;">"prefixsuffix"</span>)
<span style="font-style: italic;">"suffix"</span>
</pre>
</div>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>Cons Cells in Lisp Flavoured Erlang</title>
    <link href="https://blorg.ericb.me/2015/08/cons-cells-in-lfe/index.html" />
    <id>https://blorg.ericb.me/2015/08/cons-cells-in-lfe/index.html</id>
    <published>2015-08-10T00:00:00Z</published>
    <updated>2015-08-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 10 August, 2015
      
      
      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html">lisp</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html">beam</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Just as you'd expect from <a href="http://learnyousomeerlang.com/starting-out-for-real#lists">Erlang</a> or <a href="http://clojure.org/lisps">another Lisp</a>, in <a href="http://lfe.gitbooks.io/tutorial/content/sequential/lists.html">LFE</a>, lists are composed of
<a href="http://cs.gmu.edu/~sean/lisp/cons/"><i>cons cells</i></a> and when you use pattern matching to bind the head and tail of a
singleton list, <code>head</code> holds the single element and <code>tail</code> is the empty list.
</p>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (<span style="font-weight: bold;">let</span> ((`(,head . ,tail) '(a-single-element)))
    (lfe_io:format '<span style="font-style: italic;">"Head: ~w~nTail: ~w~n"</span> `(,head ,tail)))
</pre>
</div>

<pre class="example" id="org95d09bf">
Head: a-single-element
Tail: ()
ok
</pre>

<p>
We can confirm this by checking that a <i>cons cell</i> of the atom
<code>a-single-element</code> and the empty list is <a href="http://erlang.org/doc/reference_manual/expressions.html#id80197">exactly equal to</a> a singleton list of
the same atom.
</p>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (<span style="font-weight: bold;">=:=</span> (<span style="font-weight: bold;">cons</span> 'a-single-element '()) '(a-single-element))
</pre>
</div>

<pre class="example" id="org2b08394">
true
</pre>

</section>
]]></summary>
</entry>
<entry>
    <title>Lisp Flavoured Erlang and Pynchon, oh my!</title>
    <link href="https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html" />
    <id>https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html</id>
    <published>2015-08-06T00:00:00Z</published>
    <updated>16 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  6 August, 2015
      
      <br />
      Updated on 16 December, 2023
      
      
      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html">lisp</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html">beam</a>, <a title="All pages tagged &#39;metaprogramming&#39;." href="/tag/metaprogramming/index.html">metaprogramming</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
So, lately I've been getting increasingly into <a href="https://lfe.io">Lisp Flavoured Erlang (LFE)</a>.  If
you haven't tried it yet, or even if you have, check out the <a href="https://exercism.org/docs/tracks/lfe/">Exercism LFE track</a>
I helped organize.  My latest endeavour is porting Robert Levy's <a href="https://github.com/rplevy/swiss-arrows">swiss-arrows</a>
from Clojure to LFE.  It's been going well so far, despite having to rename it
to <a href="https://github.com/quasiquoting/pynchon">pynchon</a>, since Erlang wasn't down with the hyphenated name and a few people
on the <a href="https://groups.google.com/forum/#!aboutgroup/lisp-flavoured-erlang">LFE Google group</a> suggested it.
</p>

<section id="outline-container-org252f65a" class="outline-2">
<h2 id="org252f65a">Example</h2>
<div class="outline-text-2" id="text-org252f65a">
<p>
Without further ado, here's a contrived example.
<label for='mn-auto.4626400' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.4626400' class='margin-toggle'><span class='marginnote'> <code>#'compose/2</code> comes from Duncan McGreggor's <a href="https://github.com/lfex/clj">clj</a>, Clojure functions and macros for LFE, which has since been <a href="https://github.com/lfe/lfe/pull/267">merged into LFE</a>. </span>
</p>

<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt; <span style="font-style: italic;">"testing"</span>
     (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
            (lists:duplicate 3)
            (compose #'list/1 #'lists:flatten/1)
            (lfe_io:format '<span style="font-style: italic;">"non-updating: ~p\n"</span>))
     (string:substr 5)
     (<span style="font-weight: bold;">++</span> <span style="font-style: italic;">"winn"</span> &lt;&gt;))
</pre>
</div>

<p>
The wild-looking form above expands to something more like the following.
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt;
 (<span style="font-weight: bold;">progn</span>
   (lfe_io:format
    '<span style="font-style: italic;">"non-updating: ~p\n"</span>
    (<span style="font-weight: bold;">list</span>
     (lists:flatten
      (lists:duplicate 3 (string:substr <span style="font-style: italic;">"testing"</span> 1 4)))))
   <span style="font-style: italic;">"testing"</span>)
 (string:substr 5)
 (<span style="font-weight: bold;">++</span> <span style="font-style: italic;">"winn"</span> &lt;&gt;))
</pre>
</div>

<p>
After that, it becomes apparent the "return track" is rather simple.
</p>
<div class="org-src-container">
<pre class="src src-lfe">(<span style="font-weight: bold;">++</span> <span style="font-style: italic;">"winn"</span> (string:substr 5 <span style="font-style: italic;">"testing"</span>))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (-&lt;&gt; <span style="font-style: italic;">"testing"</span>
       (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
              (lists:duplicate 3)
              (compose #'list/1 #'lists:flatten/1)
              (lfe_io:format '<span style="font-style: italic;">"non-updating: ~p\n"</span>))
       (string:substr 5)
       (<span style="font-weight: bold;">++</span> <span style="font-style: italic;">"winn"</span> &lt;&gt;))
non-updating: <span style="font-style: italic;">"testtesttest"</span> <span style="font-weight: bold; font-style: italic;">; printed</span>
<span style="font-style: italic;">"winning"</span>                    <span style="font-weight: bold; font-style: italic;">; returned</span>
</pre>
</div>
</div>
</section>

</section>
]]></summary>
</entry>

</feed>
