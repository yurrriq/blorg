<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - compilers</title>
    <link href="https://blorg.ericb.me/tag/compilers.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/compilers.atom</id>
    <author>
        <name>Eric Bailey</name>
        
        <email>eric@ericb.me</email>
        
    </author>
    <updated>26 August, 2024</updated>
    <entry>
    <title>Undefined Behaviour</title>
    <link href="https://blorg.ericb.me/2018/05/undefined-behaviour/index.html" />
    <id>https://blorg.ericb.me/2018/05/undefined-behaviour/index.html</id>
    <published>2018-05-07T00:00:00Z</published>
    <updated>26 August, 2024</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  7 May, 2018

      <br />
      Updated on 26 August, 2024


      <br />
      Tags: <a title="All pages tagged &#39;c&#39;." href="/tag/c/index.html" rel="tag">c</a>, <a title="All pages tagged &#39;compilers&#39;." href="/tag/compilers/index.html" rel="tag">compilers</a>, <a title="All pages tagged &#39;school&#39;." href="/tag/school/index.html" rel="tag">school</a>, <a title="All pages tagged &#39;facepalm&#39;." href="/tag/facepalm/index.html" rel="tag">facepalm</a>

    </span>
  </p>
</section>
<section>
  <p>
A friend at work today was telling me about his wife's C​<code>++</code> class, wherein the
students were asked to predict the behaviour of the following snippet.
</p>

<div class="org-src-container">
<pre class="src src-c" id="orgee35afe">x = 10;
y = ++x + --x;
</pre>
</div>
<section id="outline-container-org0c8fbd7" class="outline-2">
<h2 id="org0c8fbd7">Example</h2>
<div class="outline-text-2" id="text-org0c8fbd7">
<p>
For simplicity, let's assume the type of both <code>x</code> and <code>y</code> is <code>int</code>.
</p>
<div class="org-src-container">
<pre class="src src-c" id="orgb948b55"><span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">x</span>, <span style="color: #cae682;">y</span>;
</pre>
</div>

<p>
We can inspect the final state of <code>x</code> and <code>y</code> with a simple <code>printf</code> call.
</p>
<div class="org-src-container">
<pre class="src src-c" id="orgfa898cb">printf<span style="color: #8c8c8c;">(</span><span style="color: #95e454;">"x = %d, y = %d\n"</span>, x, y<span style="color: #8c8c8c;">)</span>;
</pre>
</div>

<p>
Now, let's see how different compilers handle <a href="https://github.com/yurrriq/blorg/blob/main/hakyll/code/incdec.c">our program</a>.
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #e5786d;">#include</span> <span style="color: #8c8c8c;">&lt;</span><span style="color: #95e454;">stdio.h</span><span style="color: #8c8c8c;">&gt;</span>


<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">main</span><span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">argc</span>, <span style="color: #92a65e; font-weight: bold;">char</span> **<span style="color: #cae682;">argv</span><span style="color: #8c8c8c;">)</span>
<span style="color: #8c8c8c;">{</span>
    <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">x</span>, <span style="color: #cae682;">y</span>;
    x = 10;
    y = ++x + --x;

    printf<span style="color: #93a8c6;">(</span><span style="color: #95e454;">"x = %d, y = %d\n"</span>, x, y<span style="color: #93a8c6;">)</span>;
<span style="color: #8c8c8c;">}</span>
</pre>
</div>

<p>
At first glance, I would expect the right-hand side of the initialization of <code>y</code>
to evaluate to <code>11 + 10</code>, i.e., <code>21</code>.
</p>

<pre class="example">
gcc (GCC) 13.2.0

incdec.c: In function ‘main’:
incdec.c:8:9: warning: operation on ‘x’ may be undefined [-Wsequence-point]
    8 |     y = ++x + --x;
      |         ^~~

x = 10, y = 20
</pre>
</div>
</section>
<section id="outline-container-orga55bdd4" class="outline-2">
<h2 id="orga55bdd4">Curiouser and curiouser!</h2>
<div class="outline-text-2" id="text-orga55bdd4">
<p>
Unsurprisingly, GCC computes the final value of <code>x</code> to be <code>10</code>, the same as its
initial value, after being incremented and decremented. It's markedly <b>less</b>
intuitive to me that the final value of <code>y</code> is <code>20</code>.
</p>

<p>
Clang, on the other hand, agrees with me, i.e., computes the final value of <code>y</code>
to be <code>21</code>.
</p>

<pre class="example">
clang version 17.0.6

incdec.c:8:9: warning: multiple unsequenced modifications to 'x' [-Wunsequenced]
    8 |     y = ++x + --x;
      |         ^     ~~
1 warning generated.

x = 10, y = 21
</pre>
</div>
</section>
<section id="outline-container-org1520f12" class="outline-2">
<h2 id="org1520f12">The more you know</h2>
<div class="outline-text-2" id="text-org1520f12">
<p>
Both compilers warn about unsequenced modifications and the resultant undefined
behaviour. Digging around a bit leads to some fascinating discussions. The GCC
team maintains a <a href="https://gcc.gnu.org/readings.html">list of further reading</a>, including a few formal models and
analyses of sequence points in C. Further exploration is left as an exercise for
the reader.
</p>
</div>
<div id="outline-container-org79c4fb7" class="outline-3">
<h3 id="org79c4fb7">tl;dr</h3>
<div class="outline-text-3" id="text-org79c4fb7">
<blockquote cite="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html" id="orgff52af2">
<p>
It is not specified when between sequence points modifications to the values of
objects take effect.
</p>

<p>
⋯
</p>

<p>
The standard is worded confusingly, therefore there is some debate over the
precise meaning of the sequence point rules in subtle cases.
</p>
<footer><a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html">Free Software Foundation, Inc., GCC online documentation, 3.8 Options to Request or Suppress Warnings</a></footer></blockquote>
</div>
</div>
</section>

</section>
]]></summary>
</entry>

</feed>
