<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - daemon</title>
    <link href="https://blorg.ericb.me/tag/daemon.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/daemon.atom</id>
    <author>
        <name>Eric Bailey</name>
        
        <email>eric@ericb.me</email>
        
    </author>
    <updated>2019-06-17T00:00:00Z</updated>
    <entry>
    <title>OpenConnect Launch Daemon</title>
    <link href="https://blorg.ericb.me/2019/06/openconnect-launch-daemon/index.html" />
    <id>https://blorg.ericb.me/2019/06/openconnect-launch-daemon/index.html</id>
    <published>2019-06-17T00:00:00Z</published>
    <updated>2019-06-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 17 June, 2019


      <br />
      Tags: <a title="All pages tagged &#39;darwin&#39;." href="/tag/darwin/index.html" rel="tag">darwin</a>, <a title="All pages tagged &#39;vpn&#39;." href="/tag/vpn/index.html" rel="tag">vpn</a>, <a title="All pages tagged &#39;openconnect&#39;." href="/tag/openconnect/index.html" rel="tag">openconnect</a>, <a title="All pages tagged &#39;launchd&#39;." href="/tag/launchd/index.html" rel="tag">launchd</a>, <a title="All pages tagged &#39;daemon&#39;." href="/tag/daemon/index.html" rel="tag">daemon</a>

    </span>
  </p>
</section>
<section>
  <p>
What follows is a sparsely documented literate program to manage an OpenConnect
VPN connection with <code>launchd</code> on macOS. Many thanks to <a href="https://github.com/ashgillman">Ashley Gilman</a> for their
blog post, <a href="https://ashgillman.github.io/2017/02/14/openconnect-launchd.html">Managing an Openconnect VPN Connection with launchd on OSX</a>, upon
which this is based.
</p>
<section id="outline-container-org2dc1f56" class="outline-2">
<h2 id="org2dc1f56">OpenConnect Wrapper</h2>
<div class="outline-text-2" id="text-org2dc1f56">
<p>
Define a function <code>handler</code> to send an <code>INT</code> signal to <code>$PID</code>, then <code>trap</code>
<code>TERM</code> signals and call <code>handler</code> instead, which will enable ending an
<code>openconnect</code> process gracefully with <code>launchd</code>.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #cae682;">handler</span><span style="color: #8c8c8c;">()</span> <span style="color: #8c8c8c;">{</span>
    kill -INT <span style="color: #95e454;">"$PID"</span> 2&gt;/dev/null
<span style="color: #8c8c8c;">}</span>

<span style="color: #8ac6f2; font-weight: bold;">trap</span> handler SIGTERM
</pre>
</div>

<p>
Pipe <code>STDIN</code> and pass any given arguments to <code>/usr/local/bin/openconnect</code>, and
send to the background.
</p>
<div class="org-src-container">
<pre class="src src-bash">cat | /usr/local/bin/openconnect <span style="color: #95e454;">"$@"</span> &amp;
</pre>
</div>

<p>
Keep the wrapper process alive as long as the <code>openconnect</code> process is, by
capturing its PID and <code>wait</code>-ing for it.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #cae682;">PID</span>=$<span style="color: #cae682;">!</span>
<span style="color: #e5786d;">wait</span> <span style="color: #95e454;">"$PID"</span>
</pre>
</div>
</div>
</section>
<section id="outline-container-org194cf40" class="outline-2">
<h2 id="org194cf40">Password File</h2>
<div class="outline-text-2" id="text-org194cf40">
<p>
Store the password (without a trailing newline) in a file,
<code>/etc/openconnect/passwd</code>, owned by <code>root</code>.
</p>

<p>
Remove read/write access from all but <code>root</code>.
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo chmod og-rw /etc/openconnect/passwd
</pre>
</div>
</div>
</section>
<section id="outline-container-org0c96d26" class="outline-2">
<h2 id="org0c96d26">Launch Daemon</h2>
<div class="outline-text-2" id="text-org0c96d26">
<p>
Set up a launch daemon by creating a property list file,
<code>/Library/LaunchDaemons/me.ericb.openconnect.plist</code>.
</p>
<div class="org-src-container">
<pre class="src src-xml">&lt;?<span style="color: #8ac6f2; font-weight: bold;">xml</span> <span style="color: #95e454;">version="1.0" encoding="UTF-8"</span>?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;<span style="color: #cae682;">plist</span> <span style="color: #cae682;">version</span>=<span style="color: #95e454;">"1.0"</span>&gt;
  &lt;<span style="color: #cae682;">dict</span>&gt;
    &lt;<span style="color: #cae682;">key</span>&gt;Label&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;me.ericb.openconnect-example&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Specify that the password, stored in <code>/etc/openconnect/passwd-example</code>, will be
supplied via stdin.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;StandardInPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/etc/openconnect/passwd-example&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Use the wrapper defined above.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;ProgramArguments&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">array</span>&gt;
      &lt;<span style="color: #cae682;">string</span>&gt;/etc/openconnect-wrapper&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Tell <code>openconnect</code> we're supplying the password via stdin.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--passwd-on-stdin&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the OpenConnect protocol to AnyConnect.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--protocol=anyconnect&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the reconnect timeout to <code>1800</code> seconds.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--reconnect-timeout=1800&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the username.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--user=alice&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Finally, specify the VPN server hostname.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;vpn.example.com&lt;/<span style="color: #cae682;">string</span>&gt;
    &lt;/<span style="color: #cae682;">array</span>&gt;
</pre>
</div>

<p>
Configure log files for debugging.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;StandardOutPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/var/log/me.ericb.openconnectconsole.log&lt;/<span style="color: #cae682;">string</span>&gt;
    &lt;<span style="color: #cae682;">key</span>&gt;StandardErrorPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/var/log/me.ericb.openconnect/error.log&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Close the open XML tags.
</p>
<div class="org-src-container">
<pre class="src src-xml">  &lt;/<span style="color: #cae682;">dict</span>&gt;
&lt;/<span style="color: #cae682;">plist</span>&gt;
</pre>
</div>
</div>
</section>

</section>
]]></summary>
</entry>

</feed>
