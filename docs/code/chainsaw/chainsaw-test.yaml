apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: dns
spec:
  description: |
    Verify the DNS management provided by cert-manager and ExternalDNS.
  steps:
    - name: create-ingress
      description: |
        Create an Ingress with rules for hosts matching each of the zones and
        names configured in the ClusterIssuer/letsencrypt-staging, including a
        single TLS certificate for all the DNS names.
      try:
        - description: |
            Parse the solvers from the ClusterIssuer/letsencrypt-staging.
          script:
            content: |
              kubectl get clusterissuer/letsencrypt-staging \
                  --output jsonpath='{.spec.acme.solvers}'
            outputs:
              - name: solvers
                value: (json_parse($stdout))
              - name: dns_names
                value: ($solvers[?selector.dnsNames].selector.dnsNames[])
              - name: dns_zones
                value: ($solvers[?selector.dnsZones].selector.dnsZones[])
        - description: |
            Create an nginx Deployment and Service as a backend.
          apply:
            file: nginx.yaml
        - description: |
            Create the Ingress.
          apply:
            bindings:
              - name: hosts
                value: ([$dns_names, $dns_zones[].join('.', ['burek', @])][])
              - name: secret_name
                value: (join('-', [$namespace, 'tls']))
            resource:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                annotations:
                  alb.ingress.kubernetes.io/scheme: internal
                  alb.ingress.kubernetes.io/target-type: ip
                  cert-manager.io/cluster-issuer: letsencrypt-staging
                name: ($namespace)
              spec:
                ingressClassName: alb
                rules: |-
                  ($hosts[].{"host": @, "http": {"paths": [{"backend": {"service": {"name": 'nginx', "port": {"number": `80`}}}, "path": '/', "pathType": 'ImplementationSpecific'}]}})
                tls: |-
                  ([{"hosts": $hosts, "secretName": $secret_name}])
    - name: verify-ingress
      description: |
        Verify the Ingress and dump ExternalDNS logs. Otherwise dump LBC logs.
      try:
        - description: |
           Ensure the Ingress has successfully provisioned a load balancer
           within 5m.
          assert:
            resource:
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: ($namespace)
              (status.loadBalancer.ingress != null): true
            timeout: 5m
      catch:
        - description: |
            Dump LBC logs.
          podLogs:
            container: aws-load-balancer-controller
            namespace: kube-system
            selector: app.kubernetes.io/name=aws-load-balancer-controller
            tail: 30
      finally:
        - description: |
            Dump ExternalDNS logs.
          podLogs:
            container: external-dns
            namespace: kube-system
            selector: app.kubernetes.io/name=external-dns
            tail: 30
    - name: verify-certificate
      description: |
        Verify the expected certificate. Otherwise dump cert-manager logs.
      try:
        - description: |
            Ensure the Certificate is ready within 5m.
          assert:
            resource:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: (join('-', [$namespace, 'tls']))
              status:
                (conditions[?type == 'Ready']):
                  - status: "True"
            timeout: 5m
      catch:
        - description: |
            Dump cert-manager logs.
          podLogs:
            container: cert-manager-controller
            namespace: cert-manager
            selector: app.kubernetes.io/name=cert-manager
            tail: 30
