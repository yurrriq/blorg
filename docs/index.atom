<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me</title>
    <link href="https://blorg.ericb.me/index.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/index.atom</id>
    <author>
        <name>Eric Bailey</name>
        
        <email>eric@ericb.me</email>
        
    </author>
    <updated>28 August, 2024</updated>
    <entry>
    <title>Kubernetes E2E Testing with Chainsaw</title>
    <link href="https://blorg.ericb.me/2024/08/chainsaw/index.html" />
    <id>https://blorg.ericb.me/2024/08/chainsaw/index.html</id>
    <published>2024-08-27T00:00:00Z</published>
    <updated>28 August, 2024</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 27 August, 2024

      <br />
      Updated on 28 August, 2024


      <br />
      Tags: <a title="All pages tagged &#39;kubernetes&#39;." href="/tag/kubernetes/index.html" rel="tag">kubernetes</a>, <a title="All pages tagged &#39;e2e-testing&#39;." href="/tag/e2e-testing/index.html" rel="tag">e2e-testing</a>

    </span>
  </p>
</section>
<section>
  <p>
<a href="https://kyverno.github.io/chainsaw/">Chainsaw</a> was developed to be used internally to continuously test <a href="https://kyverno.io/">Kyverno</a>. Due
to its declarative YAML-based design and highly expressive assertion
model,<label for='mn-auto.2856921' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.2856921' class='margin-toggle'><span class='marginnote'> <a href="https://kyverno.github.io/chainsaw/">Chainsaw</a>'s assertion model is based on <a href="https://kyverno.github.io/kyverno-json/">kyverno-json</a>. </span>
it's generally useful for managing complex end to end tests.
</p>

<p>
<span class="newthought">A common problem domain</span> on Kubernetes
is management of DNS records to point to load balancers and certificates to
secure them. Arguably, the industry standard tools are <a href="https://kubernetes-sigs.github.io/external-dns/">ExternalDNS</a> and
<a href="https://cert-manager.io/">cert-manager</a>, respectively. Both rely on being able to manage particular DNS
records,<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> Such as <code>CNAME</code> records to point to <code>Ingresses</code> of type <code>LoadBalancer</code> and <code>TXT</code> records to solve <a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge">DNS-01 challenges</a>. </span> which requires
appropriate cloud provider permissions, proper configuration ensuring the tools
point to the correct DNS zones, etc. While it's fairly easy to reason about,
there are many <del>moving parts</del> points of failure, making it complex to test.
</p>


<figure id="org0ce0959">
<img src="https://farm8.staticflickr.com/7228/7239646948_8cf86fbdbf_b.jpg" alt="Handsaw">

<figcaption><span class="figure-number">Figure 1: </span><a href="https://photos.jdhancock.com/photo/2012-05-21-011441-handsaw.html">Photo</a> by <a href="https://photos.jdhancock.com">JD Hancock</a> <a href="https://creativecommons.org/licenses/by/3.0/deed.en_US">cc</a></figcaption>
</figure>

<p>
<span class="newthought">Fortunately</span>, Chainsaw makes it
easy to define a <a href="https://kyverno.github.io/chainsaw/0.2.3/reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Test"><code>Test</code></a> covering the DNS management scenario.
</p>

<p>
<label for='mn-auto.572549' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.572549' class='margin-toggle'><span class='marginnote'> This post is a literate program using <a href="https://orgmode.org/manual/Noweb-Reference-Syntax.html">Org Mode's noweb style syntax</a>. The <a href="https://manpages.org/notangle">tangled</a> results can be found <a href="https://github.com/yurrriq/blorg/tree/main/code/chainsaw">on GitHub</a>. </span>
</p>
<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 1: </span><a href="https://github.com/yurrriq/blorg/blob/main/code/chainsaw/chainsaw-test.yaml">chainsaw-test.yaml</a></label><pre class="src src-yaml" id="org9beed48"><span style="color: #cae682;">apiVersion</span>: chainsaw.kyverno.io/v1alpha1
<span style="color: #cae682;">kind</span>: Test
<span style="color: #cae682;">metadata</span>:
  <span style="color: #cae682;">name</span>: dns
<span style="color: #cae682;">spec</span>:
  <span style="color: #cae682;">description</span>: |-
    <span style="color: #95e454;">Verify the DNS management provided by cert-manager and ExternalDNS.</span>
  <span style="color: #cae682;">steps</span>:
    - <span style="color: #cae682;">name</span>: create-ingress
      <span style="color: #cae682;">description</span>: |-
        <span style="color: #95e454;">Create an Ingress with rules for hosts matching each of the zones and</span>
<span style="color: #95e454;">        names configured in the ClusterIssuer/letsencrypt-staging, including a</span>
<span style="color: #95e454;">        single TLS certificate for all the DNS names.</span>
      <span style="color: #cae682;">try</span>:
        - <span style="color: #cae682;">description</span>: |-
            <span style="color: #95e454;">Parse the solvers from the ClusterIssuer/letsencrypt-staging.</span>
          &lt;&lt;Parse the solvers from the ClusterIssuer&gt;&gt;
        - <span style="color: #cae682;">description</span>: |-
            <span style="color: #95e454;">Create an nginx Deployment and Service as a backend.</span>
          &lt;&lt;Create an nginx Deployment and Service as a backend&gt;&gt;
        - <span style="color: #cae682;">description</span>: |-
            <span style="color: #95e454;">Create the Ingress.</span>
          &lt;&lt;Create an Ingress for all zones and names, including TLS&gt;&gt;
    - <span style="color: #cae682;">name</span>: verify-ingress
      &lt;&lt;Verify the expected Ingress&gt;&gt;
    - <span style="color: #cae682;">name</span>: verify-certificate
      &lt;&lt;Verify the expected Certificate&gt;&gt;
</pre>
</div>

<p>
<span class="newthought">For the first step,</span> <label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> That is, a <a href="https://kyverno.github.io/chainsaw/0.2.3/reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-TestStep">TestStep</a>. </span> assume the existence of a
<code>ClusterIssuer/letsencrypt-staging</code> similar to the following, and parse its
<a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge">DNS-01</a> <a href="https://cert-manager.io/docs/reference/api-docs/#acme.cert-manager.io/v1.ACMEChallengeSolverDNS01">solvers</a>.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="org7161a33"><span style="color: #cae682;">apiVersion</span>: cert-manager.io/v1
<span style="color: #cae682;">kind</span>: ClusterIssuer
<span style="color: #cae682;">metadata</span>:
  <span style="color: #cae682;">name</span>: letsencrypt-staging
<span style="color: #cae682;">spec</span>:
  <span style="color: #cae682;">acme</span>:
    <span style="color: #cae682;">privateKeySecretRef</span>:
      <span style="color: #cae682;">name</span>: letsencrypt-staging
    <span style="color: #cae682;">server</span>: https://acme-staging-v02.api.letsencrypt.org/directory
    <span style="color: #cae682;">solvers</span>:
      - <span style="color: #cae682;">dns01</span>:
          <span style="color: #cae682;">route53</span>: {<span style="color: #cae682;">}</span>
<span style="color: #cae682;">        selector</span>:
          <span style="color: #cae682;">dnsZones</span>:
            - foo.example.com
      - <span style="color: #cae682;">dns01</span>:
          <span style="color: #cae682;">route53</span>: {<span style="color: #cae682;">}</span>
<span style="color: #cae682;">        selector</span>:
          <span style="color: #cae682;">dnsZones</span>:
            - bar.example.net
      - <span style="color: #cae682;">dns01</span>:
          <span style="color: #cae682;">route53</span>: {<span style="color: #cae682;">}</span>
<span style="color: #cae682;">        selector</span>:
          <span style="color: #cae682;">dnsNames</span>:
            - baz.example.org
</pre>
</div>
<p>
<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> N.B. This example also assumes <a href="https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html">IRSA</a> is configured. </span>
</p>

<p>
This <code>ClusterIssuer</code> is responsible for solving <a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge">DNS-01 challenges</a> for the
<code>foo.example.com</code> and <code>bar.example.net</code> zones, and for the specific DNS name
<code>baz.example.org</code>.
</p>

<p>
First, use <code>kubectl</code>'s <a href="https://kubernetes.io/docs/reference/kubectl/jsonpath/">JSONPath support</a> to extract just the <code>solvers</code>.
</p>

<div class="org-src-container">
<pre class="src src-bash" id="orga55bdd4">kubectl get clusterissuer/letsencrypt-staging <span style="color: #95e454;">\</span>
    --output <span style="color: #cae682;">jsonpath</span>=<span style="color: #95e454;">'{.spec.acme.solvers}'</span>
</pre>
</div>

<p>
Parse <code>stdout</code> and bind the result to <code>$solvers</code>.<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> Refer to the Chainsaw documentation on <a href="https://kyverno.github.io/chainsaw/0.2.3/quick-start/operation-outputs/#load-an-existing-resource">loading an existing resource</a>. </span>
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="orgf718da5">- <span style="color: #cae682;">name</span>: solvers
  <span style="color: #cae682;">value</span>: (json_parse($stdout))
</pre>
</div>

<p>
From <code>$solvers</code> extract all the DNS names and zones as two flat arrays,
leveraging Chainsaw's <a href="https://jmespath.site">JMESPath</a> support.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="orgf42ba8d">- <span style="color: #cae682;">name</span>: dns_names
  <span style="color: #cae682;">value</span>: ($solvers[?selector.dnsNames].selector.dnsNames[])
- <span style="color: #cae682;">name</span>: dns_zones
  <span style="color: #cae682;">value</span>: ($solvers[?selector.dnsZones].selector.dnsZones[])
</pre>
</div>

<p>
Bring it all together to define the first <a href="https://kyverno.github.io/chainsaw/0.2.3/operations/"><code>Operation</code></a>.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="orgc025086"><span style="color: #cae682;">script</span>:
  <span style="color: #cae682;">content</span>: |
    <span style="color: #95e454;">&lt;&lt;Extract the solvers&gt;&gt;</span>
  <span style="color: #cae682;">outputs</span>:
    &lt;&lt;Parse stdout and bind the result to $solvers&gt;&gt;
    &lt;&lt;Extract the names and zones&gt;&gt;
</pre>
</div>

<p>
<span class="newthought">Define a simple backend,</span> using a
vanilla nginx container, to test the DNS management setup. Include a
<code>Deployment</code>, <code>Service</code>, and, mostly importantly, an <code>Ingress</code>.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="orgd9cd98a"><span style="color: #cae682;">apply</span>:
  <span style="color: #cae682;">file</span>: nginx.yaml
</pre>
</div>

<p>
<label for='mn-auto.6293918' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.6293918' class='margin-toggle'><span class='marginnote'> Since the particular backend is irrelevant to the test, just use a <code>Deployment</code> with a single <code>nginx:alpine</code> container to keep it simple. </span>
</p>

<div class="org-src-container">
<label class="org-src-name"><span class="listing-number">Listing 2: </span><a href="https://github.com/yurrriq/blorg/blob/main/code/chainsaw/nginx.yaml">nginx.yaml</a></label><pre class="src src-yaml"><span style="color: #99968b;">---</span>
<span style="color: #cae682;">apiVersion</span>: apps/v1
<span style="color: #cae682;">kind</span>: Deployment
<span style="color: #cae682;">metadata</span>:
  <span style="color: #cae682;">name</span>: nginx
<span style="color: #cae682;">spec</span>:
  <span style="color: #cae682;">replicas</span>: 1
  <span style="color: #cae682;">selector</span>:
    <span style="color: #cae682;">matchLabels</span>:
      <span style="color: #cae682;">app.kubernetes.io/name</span>: nginx
  <span style="color: #cae682;">template</span>:
    <span style="color: #cae682;">metadata</span>:
      <span style="color: #cae682;">labels</span>:
        <span style="color: #cae682;">app.kubernetes.io/name</span>: nginx
    <span style="color: #cae682;">spec</span>:
      <span style="color: #cae682;">containers</span>:
        - <span style="color: #cae682;">name</span>: nginx
          <span style="color: #cae682;">image</span>: nginx:alpine
          <span style="color: #cae682;">ports</span>:
            - <span style="color: #cae682;">containerPort</span>: 80
              <span style="color: #cae682;">name</span>: http
              <span style="color: #cae682;">protocol</span>: TCP
</pre>
</div>

<p>
<label for='mn-auto.6293918' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.6293918' class='margin-toggle'><span class='marginnote'> Create a <code>Service</code> using the same selectors as the <code>Deployment</code>, which will be referenced by the <code>Ingress</code> rules. </span>
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #99968b;">---</span>
<span style="color: #cae682;">apiVersion</span>: v1
<span style="color: #cae682;">kind</span>: Service
<span style="color: #cae682;">metadata</span>:
  <span style="color: #cae682;">name</span>: nginx
<span style="color: #cae682;">spec</span>:
  <span style="color: #cae682;">selector</span>:
    <span style="color: #cae682;">app.kubernetes.io/name</span>: nginx
  <span style="color: #cae682;">ports</span>:
    - <span style="color: #cae682;">name</span>: http
      <span style="color: #cae682;">protocol</span>: TCP
      <span style="color: #cae682;">port</span>: 80
      <span style="color: #cae682;">targetPort</span>: http
<span style="color: #cae682;">type</span>: ClusterIP
</pre>
</div>

<p>
With the boring <code>Deployment</code> and <code>Service</code> out of the way, define the <code>Ingress</code>,
using several key Chainsaw features.
</p>

<p>
<label for='mn-auto.6293918' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.6293918' class='margin-toggle'><span class='marginnote'> This is one of the major selling points of Chainsaw. </span>
<span class="newthought">For the Ingress,</span> <a href="https://kyverno.github.io/chainsaw/0.2.3/quick-start/bindings/">use bindings</a> to
declare <code>$hosts</code> based on the <code>$dns_names</code> and <code>$dns_zones</code>.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="org8948797"><span style="color: #cae682;">bindings</span>:
  - <span style="color: #cae682;">name</span>: hosts
    <span style="color: #cae682;">value</span>: ([$dns_names, $dns_zones[].join(<span style="color: #95e454;">'.'</span>, [<span style="color: #95e454;">'burek'</span>, @])][])
  - <span style="color: #cae682;">name</span>: secret_name
    <span style="color: #cae682;">value</span>: (join(<span style="color: #95e454;">'-'</span>, [$namespace, <span style="color: #95e454;">'tls'</span>]))
</pre>
</div>

<p>
Define <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules">rules</a> for each host in <code>$hosts</code>, again using <a href="https://jmespath.site">JMESPath</a>.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="org7e0b801"><span style="color: #cae682;">rules</span>: |-
  ($hosts[].{<span style="color: #95e454;">"host"</span>: @, <span style="color: #95e454;">"http"</span>: {<span style="color: #95e454;">"paths"</span>: [{<span style="color: #95e454;">"backend"</span>: {<span style="color: #95e454;">"service"</span>: {<span style="color: #95e454;">"name"</span>: <span style="color: #95e454;">'nginx'</span>, <span style="color: #95e454;">"port"</span>: {<span style="color: #95e454;">"number"</span>: `80`}}}, <span style="color: #95e454;">"path"</span>: <span style="color: #95e454;">'/'</span>, <span style="color: #95e454;">"pathType"</span>: <span style="color: #95e454;">'ImplementationSpecific'</span>}]}})
</pre>
</div>

<p>
Request a single certificate for each DNS name, in order to verify cert-manager
is working as expected.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="org39af42c"><span style="color: #cae682;">tls</span>: |-
  ([{<span style="color: #95e454;">"hosts"</span>: $hosts, <span style="color: #95e454;">"secretName"</span>: $secret_name}])
</pre>
</div>

<p>
Finally, define the <code>Operation</code> to create the <code>Ingress</code>.<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> N.B. The <code>Ingress</code> assumes an existing <code>IngressClass/alb</code>, such as part of an installation of the <a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/">AWS Load Balancer Controller</a>. </span>
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="org288531e"><span style="color: #cae682;">apply</span>:
  &lt;&lt;Define some bindings for the Ingress&gt;&gt;
  <span style="color: #cae682;">resource</span>:
    <span style="color: #cae682;">apiVersion</span>: networking.k8s.io/v1
    <span style="color: #cae682;">kind</span>: Ingress
    <span style="color: #cae682;">metadata</span>:
      <span style="color: #cae682;">annotations</span>:
        <span style="color: #cae682;">alb.ingress.kubernetes.io/scheme</span>: internal
        <span style="color: #cae682;">alb.ingress.kubernetes.io/target-type</span>: ip
        <span style="color: #cae682;">cert-manager.io/cluster-issuer</span>: letsencrypt-staging
      <span style="color: #cae682;">name</span>: ($namespace)
    <span style="color: #cae682;">spec</span>:
      <span style="color: #cae682;">ingressClassName</span>: alb
      &lt;&lt;Define rules for each host in $hosts&gt;&gt;
      &lt;&lt;Declare a single TLS secret for all hosts&gt;&gt;
</pre>
</div>

<p>
<span class="newthought">With those resources created,</span> it's time
to verify the <code>Ingress</code>.<label for='mn-auto.6293918' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.6293918' class='margin-toggle'><span class='marginnote'> Verifying DNS records is left as an exercise to the reader. </span> The main idea here is to use a <a href="https://jmespath.site">JMESPath</a> expression
and assert the result is <code>true</code>, i.e., ensure the presence of
<code>status.loadBalancer.ingress</code>, meaning a load balancer was successfully
provisioned.<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> cf. <a href="https://kyverno.github.io/chainsaw/0.2.3/quick-start/assertion-trees/#beyond-simple-equality">Beyond simple equality</a> </span>
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="orge449b50"><span style="color: #cae682;">description</span>: |-
  <span style="color: #95e454;">Verify the Ingress and dump ExternalDNS logs. Otherwise dump LBC logs.</span>
<span style="color: #cae682;">try</span>:
  - <span style="color: #cae682;">description</span>: |-
     <span style="color: #95e454;">Ensure the Ingress has successfully provisioned a load balancer</span>
<span style="color: #95e454;">     within 5m.</span>
    <span style="color: #cae682;">assert</span>:
      <span style="color: #cae682;">resource</span>:
        <span style="color: #cae682;">apiVersion</span>: networking.k8s.io/v1
        <span style="color: #cae682;">kind</span>: Ingress
        <span style="color: #cae682;">metadata</span>:
          <span style="color: #cae682;">name</span>: ($namespace)
        (status.loadBalancer.ingress <span style="color: #92a65e; font-weight: bold;">!=</span> null): <span style="color: #e5786d;">true</span>
      <span style="color: #cae682;">timeout</span>: 5m
<span style="color: #cae682;">catch</span>:
  - <span style="color: #cae682;">description</span>: |-
      <span style="color: #95e454;">Dump LBC logs.</span>
    <span style="color: #cae682;">podLogs</span>:
      <span style="color: #cae682;">container</span>: aws-load-balancer-controller
      <span style="color: #cae682;">namespace</span>: kube-system
      <span style="color: #cae682;">selector</span>: app.kubernetes.io/name=aws-load-balancer-controller
      <span style="color: #cae682;">tail</span>: 30
<span style="color: #cae682;">finally</span>:
  - <span style="color: #cae682;">description</span>: |-
      <span style="color: #95e454;">Dump ExternalDNS logs.</span>
    <span style="color: #cae682;">podLogs</span>:
      <span style="color: #cae682;">container</span>: external-dns
      <span style="color: #cae682;">namespace</span>: kube-system
      <span style="color: #cae682;">selector</span>: app.kubernetes.io/name=external-dns
      <span style="color: #cae682;">tail</span>: 30
</pre>
</div>

<p>
<span class="newthought">Verifying the Certificate</span> is more
straightforward, not least because <a href="https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.Certificate"><code>Certificate</code></a> is a Kubernetes
resource. cert-manager won't mark it as ready until Let's Encrypt has
successfully issued it. The issuance shouldn't take more than five
minutes,<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> It's also possible to <a href="https://kyverno.github.io/chainsaw/0.2.3/configuration/options/timeouts/">configure timeouts globally</a><br> instead of per operation. </span> so give up and dump the last 30 cert-manager log lines if
it's been longer.
</p>

<div class="org-src-container">
<pre class="src src-yaml" id="org049cd7c"><span style="color: #cae682;">description</span>: |-
  <span style="color: #95e454;">Verify the expected certificate. Otherwise dump cert-manager logs.</span>
<span style="color: #cae682;">try</span>:
  - <span style="color: #cae682;">description</span>: |-
      <span style="color: #95e454;">Ensure the Certificate is ready within 5m.</span>
    <span style="color: #cae682;">assert</span>:
      <span style="color: #cae682;">resource</span>:
        <span style="color: #cae682;">apiVersion</span>: cert-manager.io/v1
        <span style="color: #cae682;">kind</span>: Certificate
        <span style="color: #cae682;">metadata</span>:
          <span style="color: #cae682;">name</span>: (join(<span style="color: #95e454;">'-'</span>, [$namespace, <span style="color: #95e454;">'tls'</span>]))
        <span style="color: #cae682;">status</span>:
          (conditions[?type == <span style="color: #95e454;">'Ready'</span>]):
            - <span style="color: #cae682;">status</span>: <span style="color: #95e454;">"True"</span>
      <span style="color: #cae682;">timeout</span>: 5m
<span style="color: #cae682;">catch</span>:
  - <span style="color: #cae682;">description</span>: |-
      <span style="color: #95e454;">Dump cert-manager logs.</span>
    <span style="color: #cae682;">podLogs</span>:
      <span style="color: #cae682;">container</span>: cert-manager-controller
      <span style="color: #cae682;">namespace</span>: cert-manager
      <span style="color: #cae682;">selector</span>: app.kubernetes.io/name=cert-manager
      <span style="color: #cae682;">tail</span>: 30
</pre>
</div>

<p>
<span class="newthought">Chainsaw's power</span> makes it an
indispensable tool. Writing complex tests using YAML<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> Admittedly, said YAML is rather complex and includes extra features such as <a href="https://jmespath.site">JMESPath</a> support. </span> is a pleasant experience, compared to something like Go with
substantial and unavoidable boilerplate. As a bonus, it has a very
Kubernetes-native feel. This post only scratches the surface of what Chainsaw
can do. It supports <a href="https://kyverno.github.io/chainsaw/0.2.3/quick-start/run-tests/">kind</a>, <a href="https://kyverno.github.io/chainsaw/0.2.3/examples/multi-cluster/">multi-cluster setups</a>, <a href="https://kyverno.github.io/chainsaw/0.2.3/guides/test-docs/">building documention of tests</a>,
and much more!
</p>

<div class="epigraph" id="orgc36236b">
<blockquote>
<p>
Let's head down into that cellar and carve ourselves a witch.
</p>
<footer>Ash Williams, <cite><a href="https://letterboxd.com/film/evil-dead-ii/">Evil Dead II</a></cite> (1987)</footer></blockquote>

</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Monadic Vectors</title>
    <link href="https://blorg.ericb.me/2023/12/monadic-vectors/index.html" />
    <id>https://blorg.ericb.me/2023/12/monadic-vectors/index.html</id>
    <published>2023-12-02T00:00:00Z</published>
    <updated>02 January, 2024</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  2 December, 2023

      <br />
      Updated on 02 January, 2024


      <br />
      Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tag/haskell/index.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;monads&#39;." href="/tag/monads/index.html" rel="tag">monads</a>, <a title="All pages tagged &#39;mathematics&#39;." href="/tag/mathematics/index.html" rel="tag">mathematics</a>, <a title="All pages tagged &#39;algebra&#39;." href="/tag/algebra/index.html" rel="tag">algebra</a>

    </span>
  </p>
</section>
<section>
  <p>
<a href="https://hackage.haskell.org/package/linear-1.22/docs/src/Linear.V3.html#line-106">The <code>Functor</code> instance</a> for <a href="https://hackage.haskell.org/package/linear-1.22/docs/Linear-V3.html">3-dimensional vectors</a> applies a function <code>f</code> to each
basis vector, preserving the structure of the 3-D vector.
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="org9639605"><span style="color: #8ac6f2; font-weight: bold;">instance</span> <span style="color: #92a65e; font-weight: bold;">Functor</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8ac6f2; font-weight: bold;">where</span>
  fmap f <span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">V3</span> a b c<span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">=</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8c8c8c;">(</span>f a<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span>f b<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span>f c<span style="color: #8c8c8c;">)</span>
  a <span style="color: #cae682;">&lt;$</span> <span style="color: #8ac6f2; font-weight: bold;">_</span> <span style="color: #cae682;">=</span> <span style="color: #92a65e; font-weight: bold;">V3</span> a a a
</pre>
</div>

<div class="org-src-container">
<pre class="src src-haskell" id="org9beed48">&#955;<span style="color: #cae682;">&gt;</span> fmap <span style="color: #8c8c8c;">(</span><span style="color: #cae682;">+</span>1<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">V3</span> 1 2 3<span style="color: #8c8c8c;">)</span>
<span style="color: #92a65e; font-weight: bold;">V3</span> 2 3 4
</pre>
</div>

<p>
<a href="https://hackage.haskell.org/package/linear-1.22/docs/src/Linear.V3.html#line-148">The <code>Applicative</code> instance</a> provides operations to embed pure expressions
(<a href="https://hackage.haskell.org/package/base-4.19.0.0/docs/Prelude.html#v:pure"><code>pure</code></a>), and sequence computations and combine their results (<a href="https://hackage.haskell.org/package/base-4.19.0.0/docs/Prelude.html#v:-60--42--62-"><code>&lt;*&gt;</code></a> and
<a href="https://hackage.haskell.org/package/base-4.19.0.0/docs/Prelude.html#v:liftA2"><code>liftA2</code></a>).
<label for="mn-lifta2" class="margin-toggle">&#8853;</label>
<input type="checkbox" id="mn-lifta2" class="margin-toggle"/>
<span class="marginnote">
N.B. The default definition is:<br/>
<code class="src src-haskell"><span style="color: #cae682;">liftA2</span> f x y <span style="color: #cae682;">=</span> f <span style="color: #cae682;">&lt;$&gt;</span> x <span style="color: #cae682;">&lt;*&gt;</span> y</code>
</span>
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="org194cf40"><span style="color: #8ac6f2; font-weight: bold;">instance</span> <span style="color: #92a65e; font-weight: bold;">Applicative</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8ac6f2; font-weight: bold;">where</span>
  pure a <span style="color: #cae682;">=</span> <span style="color: #92a65e; font-weight: bold;">V3</span> a a a
  <span style="color: #92a65e; font-weight: bold;">V3</span> a b c <span style="color: #cae682;">&lt;*&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> d e f <span style="color: #cae682;">=</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8c8c8c;">(</span>a d<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span>b e<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span>c f<span style="color: #8c8c8c;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-haskell" id="orga55bdd4">&#955;<span style="color: #cae682;">&gt;</span> pure 0 <span style="color: #cae682;">::</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #92a65e; font-weight: bold;">Int</span>
<span style="color: #92a65e; font-weight: bold;">V3</span> 0 0 0
&#955;<span style="color: #cae682;">&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8c8c8c;">(</span><span style="color: #cae682;">+</span>5<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span><span style="color: #cae682;">+</span>3<span style="color: #8c8c8c;">)</span> <span style="color: #8c8c8c;">(</span><span style="color: #cae682;">+</span>1<span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">&lt;*&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> 1 2 3
<span style="color: #92a65e; font-weight: bold;">V3</span> 6 5 4
</pre>
</div>

<p>
Together they enable applying a binary function as follows.
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="org79c4fb7">&#955;<span style="color: #cae682;">&gt;</span> <span style="color: #8c8c8c;">(</span><span style="color: #cae682;">+</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">&lt;$&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> 1 2 3 <span style="color: #cae682;">&lt;*&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> 4 5 6
<span style="color: #92a65e; font-weight: bold;">V3</span> 5 7 9
</pre>
</div>

<p>
There's also a <a href="https://hackage.haskell.org/package/linear-1.22/docs/src/Linear.V3.html#line-169"><code>Monad</code> instance</a>, which enables concise and elegant code.
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="org0c2fec5"><span style="color: #8ac6f2; font-weight: bold;">instance</span> <span style="color: #92a65e; font-weight: bold;">Monad</span> <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8ac6f2; font-weight: bold;">where</span>
  <span style="color: #92a65e; font-weight: bold;">V3</span> a b c <span style="color: #cae682;">&gt;&gt;=</span> f <span style="color: #cae682;">=</span> <span style="color: #92a65e; font-weight: bold;">V3</span> a' b' c' <span style="color: #8ac6f2; font-weight: bold;">where</span>
    <span style="color: #92a65e; font-weight: bold;">V3</span> a' <span style="color: #8ac6f2; font-weight: bold;">_</span> <span style="color: #8ac6f2; font-weight: bold;">_</span> <span style="color: #cae682;">=</span> f a
    <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8ac6f2; font-weight: bold;">_</span> b' <span style="color: #8ac6f2; font-weight: bold;">_</span> <span style="color: #cae682;">=</span> f b
    <span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #8ac6f2; font-weight: bold;">_</span> <span style="color: #8ac6f2; font-weight: bold;">_</span> c' <span style="color: #cae682;">=</span> f c
</pre>
</div>

<p>
For example, as part of <a href="https://adventofcode.com/2023/day/2">the Advent of Code puzzle for Day 2 of 2023</a>, one must
parse revelations of the form <code>N COLOR</code> where <code>N</code> is a <a href="https://hackage.haskell.org/package/parsers-0.12.11/docs/Text-Parser-Token.html#v:natural"><code>natural</code> number</a> and
<code>COLOR</code> is one of <code>red</code>, <code>green</code>, and <code>blue</code>. The tricolor nature of the
revelations (and the subsequent computations therewith) lends itself nicely to
<a href="https://hackage.haskell.org/package/linear-1.22/docs/Linear-V3.html#t:V3">3-dimensional vectors</a>.
</p>

<p>
A naive <a href="https://hackage.haskell.org/package/trifecta-2.1.3/docs/Text-Trifecta-Parser.html#t:Parser"><code>Parser</code></a> might look as follows.
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="org72a3840"><span style="color: #cae682;">revelation</span> <span style="color: #cae682;">::</span> <span style="color: #92a65e; font-weight: bold;">Parser</span> <span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #92a65e; font-weight: bold;">Integer</span><span style="color: #8c8c8c;">)</span>
<span style="color: #cae682;">revelation</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">do</span>
    n <span style="color: #cae682;">&lt;-</span> natural
    <span style="color: #92a65e; font-weight: bold;">V3</span> n 0 0 <span style="color: #cae682;">&lt;$</span> string <span style="color: #95e454;">"red"</span>
      <span style="color: #cae682;">&lt;|&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> 0 n 0 <span style="color: #cae682;">&lt;$</span> string <span style="color: #95e454;">"green"</span>
      <span style="color: #cae682;">&lt;|&gt;</span> <span style="color: #92a65e; font-weight: bold;">V3</span> 0 0 n <span style="color: #cae682;">&lt;$</span> string <span style="color: #95e454;">"blue"</span>
</pre>
</div>

<p>
The <code>Monad</code> instance, however, enables the following.
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="orgc025086"><span style="color: #cae682;">revelation</span> <span style="color: #cae682;">::</span> <span style="color: #92a65e; font-weight: bold;">Parser</span> <span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #92a65e; font-weight: bold;">Integer</span><span style="color: #8c8c8c;">)</span>
<span style="color: #cae682;">revelation</span> <span style="color: #cae682;">=</span>
  natural <span style="color: #cae682;">&gt;&gt;=</span> <span style="color: #cae682;">\</span>n <span style="color: #cae682;">-&gt;</span>
    for <span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #95e454;">"red"</span> <span style="color: #95e454;">"green"</span> <span style="color: #95e454;">"blue"</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">$</span> <span style="color: #cae682;">\</span>color <span style="color: #cae682;">-&gt;</span>
      n <span style="color: #cae682;">&lt;$</span> string color <span style="color: #cae682;">&lt;|&gt;</span> pure 0
</pre>
</div>

<p>
Also delightfully concise is this way of determining which games are possible.
</p>

<div class="org-src-container">
<pre class="src src-haskell" id="org496e461"><span style="color: #cae682;">isPossible</span> <span style="color: #cae682;">::</span> <span style="color: #8c8c8c;">[</span><span style="color: #92a65e; font-weight: bold;">V3</span> <span style="color: #92a65e; font-weight: bold;">Integer</span><span style="color: #8c8c8c;">]</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #92a65e; font-weight: bold;">Bool</span>
<span style="color: #cae682;">isPossible</span> <span style="color: #cae682;">=</span> all <span style="color: #8c8c8c;">(</span>and <span style="color: #cae682;">.</span> liftA2 <span style="color: #93a8c6;">(</span><span style="color: #cae682;">&gt;=</span><span style="color: #93a8c6;">)</span> <span style="color: #93a8c6;">(</span><span style="color: #92a65e; font-weight: bold;">V3</span> 12 13 14<span style="color: #93a8c6;">)</span><span style="color: #8c8c8c;">)</span>
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Strange Mathematics</title>
    <link href="https://blorg.ericb.me/2020/08/strange-mathematics/index.html" />
    <id>https://blorg.ericb.me/2020/08/strange-mathematics/index.html</id>
    <published>2020-08-02T00:00:00Z</published>
    <updated>2020-08-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  2 August, 2020


      <br />
      Tags: <a title="All pages tagged &#39;mathematics&#39;." href="/tag/mathematics/index.html" rel="tag">mathematics</a>, <a title="All pages tagged &#39;proof&#39;." href="/tag/proof/index.html" rel="tag">proof</a>, <a title="All pages tagged &#39;comics&#39;." href="/tag/comics/index.html" rel="tag">comics</a>

    </span>
  </p>
</section>
<section>
  <p>
On the first page of <a href="https://www.dccomics.com/talent/tom-king">Tom King</a>'s <a href="https://www.dccomics.com/comics/strange-adventures-2020/strange-adventures-2">Strange Adventures #2</a>
<del>there is an example of <a href="https://reddit.com/r/badmath">bad mathematics</a>.</del>
</p>

<p>
<a href="https://dc.fandom.com/wiki/T-Spheres">T-Sphere</a>:
</p>
<blockquote>
<p>
IN THE EQUATION<br/>
X² + MX + N = 0,<br/>
M AND N ARE INTEGERS.<br/>
THE ONLY POSSIBLE VALUE<br/>
OF X IS -3. WHAT IS THE<br/>
VALUE OF M?
</p>
</blockquote>

<p>
<a href="https://dc.fandom.com/wiki/Michael_Holt_(New_Earth)">Mister Terrific</a>:
</p>
<blockquote>
<p>
SIX.
</p>
</blockquote>

<p>
<a href="https://dc.fandom.com/wiki/T-Spheres">T-Sphere</a>:
</p>
<blockquote>
<p>
CORRECT.
</p>
</blockquote>

<hr>

<p>
<b>Update (3 August, 2020)</b>: It turns out <i>I'm</i> the one <a href="https://www.reddit.com/r/badmathematics/comments/i28ukc/strange_mathematics/">bad mathematics</a> (and sleep hygiene).
</p>

<p>
Given \(x^2 + mx + n = 0\) and the only possible value of \(x\) is \(-3\),
\((x + 3)\) is a root of <a href="https://mathworld.wolfram.com/Multiplicity.html">multiplicity</a> \(2\).
Thus the factorization is \((x + 3)(x + 3)\), which expands to \(x^2 + 6x + 9\).
Thus \(m = 6\), just as <a href="https://dc.fandom.com/wiki/Michael_Holt_(New_Earth)">Mister Terrific</a> said. 🤦
</p>

<hr>

<p>
<del>But that's not quite right, or at least it's misleading.</del>
<del>While \(\xcancel{6}\) is a possible value for \(\xcancel{m}\), it's not the only one.</del>
</p>

<p>
<del><b>Lemma</b>. Given \(\xcancel{x^2 + mx + n = 0}\) and \(\xcancel{x = -3}\),</del>
<del>there are <a href="https://brilliant.org/wiki/cardinality/">countably infinite</a> possible values for \(m\) such that</del>
<del>\(\xcancel{m,n \in \mathbb{Z}}\).</del>
</p>

<p>
<del><i>Proof.</i></del>
<del>Rewriting the original equation with \(\xcancel{x = -3}\),</del>
<del>\(\xcancel{9 - 3m + n = 0 \leadsto m = \frac{n}{3} + 3}\).</del>
<del>It follows that \(\xcancel{\forall m \in \mathbb{Z}, \exists n \in 3\mathbb{Z}}\) such that</del>
<del>\(\xcancel{m = \frac{n}{3} + 3}\).</del>
<del>Since \(\xcancel{3\mathbb{Z} \subset \mathbb{Z}}\), and</del>
<del>there exists a bijection between \(\xcancel{\mathbb{N}}\) and \(\xcancel{3\mathbb{Z}}\), i.e.</del>
<del>\(\xcancel{\{1,2,3,4,5,6,...\} \longleftrightarrow \{0,3,-3,6,-6,9,...\}}\),</del>
<del>there are \(\xcancel{\aleph_{0}}\) possible values for \(\xcancel{m}\).</del>
<del>\(\xcancel{\blacksquare}\)</del>
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>Fix Browserpass on NixOS</title>
    <link href="https://blorg.ericb.me/2019/10/browserpass-on-nixos/index.html" />
    <id>https://blorg.ericb.me/2019/10/browserpass-on-nixos/index.html</id>
    <published>2019-10-02T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  2 October, 2019

      <br />
      Updated on 18 December, 2023


      <br />
      Tags: <a title="All pages tagged &#39;nixos&#39;." href="/tag/nixos/index.html" rel="tag">nixos</a>, <a title="All pages tagged &#39;pass&#39;." href="/tag/pass/index.html" rel="tag">pass</a>, <a title="All pages tagged &#39;browserpass&#39;." href="/tag/browserpass/index.html" rel="tag">browserpass</a>, <a title="All pages tagged &#39;firefox&#39;." href="/tag/firefox/index.html" rel="tag">firefox</a>

    </span>
  </p>
</section>
<section>
  <p>
After installing a custom version of Firefox, the <a href="https://github.com/browserpass/browserpass-extension">Browserpass extension</a> stopped
working.
</p>

<p>
To fix it, I ran the following, based on a suggestion in the <a href="https://github.com/browserpass/browserpass-native/tree/3.0.6#install-on-nix--nixos">Browerpass host
application README</a>.
</p>

<div class="org-src-container">
<pre class="src src-bash" id="orgee35afe">$ make -C /run/current-system/sw/lib/browserpass <span style="color: #cae682;">DESTDIR</span>=/run/current-system/sw hosts-firefox-user
make: Entering directory <span style="color: #95e454;">'/nix/store/wxqd9qs2mfgynh5v7zi72mfw0f81rkgg-browserpass-3.0.6/lib/browserpass'</span>
<span style="color: #95e454;">'/home/yurrriq/.mozilla/native-messaging-hosts/com.github.browserpass.native.json'</span> -&gt; <span style="color: #95e454;">'/run/current-system/sw/lib/browserpass/hosts/firefox/com.github.browserpass.native.json'</span>
make: Leaving directory <span style="color: #95e454;">'/nix/store/wxqd9qs2mfgynh5v7zi72mfw0f81rkgg-browserpass-3.0.6/lib/browserpass'</span>
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>OpenConnect Launch Daemon</title>
    <link href="https://blorg.ericb.me/2019/06/openconnect-launch-daemon/index.html" />
    <id>https://blorg.ericb.me/2019/06/openconnect-launch-daemon/index.html</id>
    <published>2019-06-17T00:00:00Z</published>
    <updated>2019-06-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 17 June, 2019


      <br />
      Tags: <a title="All pages tagged &#39;darwin&#39;." href="/tag/darwin/index.html" rel="tag">darwin</a>, <a title="All pages tagged &#39;vpn&#39;." href="/tag/vpn/index.html" rel="tag">vpn</a>, <a title="All pages tagged &#39;openconnect&#39;." href="/tag/openconnect/index.html" rel="tag">openconnect</a>, <a title="All pages tagged &#39;launchd&#39;." href="/tag/launchd/index.html" rel="tag">launchd</a>, <a title="All pages tagged &#39;daemon&#39;." href="/tag/daemon/index.html" rel="tag">daemon</a>

    </span>
  </p>
</section>
<section>
  <p>
What follows is a sparsely documented literate program to manage an OpenConnect
VPN connection with <code>launchd</code> on macOS. Many thanks to <a href="https://github.com/ashgillman">Ashley Gilman</a> for their
blog post, <a href="https://ashgillman.github.io/2017/02/14/openconnect-launchd.html">Managing an Openconnect VPN Connection with launchd on OSX</a>, upon
which this is based.
</p>
<section id="outline-container-org2dc1f56" class="outline-2">
<h2 id="org2dc1f56">OpenConnect Wrapper</h2>
<div class="outline-text-2" id="text-org2dc1f56">
<p>
Define a function <code>handler</code> to send an <code>INT</code> signal to <code>$PID</code>, then <code>trap</code>
<code>TERM</code> signals and call <code>handler</code> instead, which will enable ending an
<code>openconnect</code> process gracefully with <code>launchd</code>.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #cae682;">handler</span><span style="color: #8c8c8c;">()</span> <span style="color: #8c8c8c;">{</span>
    kill -INT <span style="color: #95e454;">"$PID"</span> 2&gt;/dev/null
<span style="color: #8c8c8c;">}</span>

<span style="color: #8ac6f2; font-weight: bold;">trap</span> handler SIGTERM
</pre>
</div>

<p>
Pipe <code>STDIN</code> and pass any given arguments to <code>/usr/local/bin/openconnect</code>, and
send to the background.
</p>
<div class="org-src-container">
<pre class="src src-bash">cat | /usr/local/bin/openconnect <span style="color: #95e454;">"$@"</span> &amp;
</pre>
</div>

<p>
Keep the wrapper process alive as long as the <code>openconnect</code> process is, by
capturing its PID and <code>wait</code>-ing for it.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #cae682;">PID</span>=$<span style="color: #cae682;">!</span>
<span style="color: #e5786d;">wait</span> <span style="color: #95e454;">"$PID"</span>
</pre>
</div>
</div>
</section>
<section id="outline-container-org194cf40" class="outline-2">
<h2 id="org194cf40">Password File</h2>
<div class="outline-text-2" id="text-org194cf40">
<p>
Store the password (without a trailing newline) in a file,
<code>/etc/openconnect/passwd</code>, owned by <code>root</code>.
</p>

<p>
Remove read/write access from all but <code>root</code>.
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo chmod og-rw /etc/openconnect/passwd
</pre>
</div>
</div>
</section>
<section id="outline-container-org0c96d26" class="outline-2">
<h2 id="org0c96d26">Launch Daemon</h2>
<div class="outline-text-2" id="text-org0c96d26">
<p>
Set up a launch daemon by creating a property list file,
<code>/Library/LaunchDaemons/me.ericb.openconnect.plist</code>.
</p>
<div class="org-src-container">
<pre class="src src-xml">&lt;?<span style="color: #8ac6f2; font-weight: bold;">xml</span> <span style="color: #95e454;">version="1.0" encoding="UTF-8"</span>?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;<span style="color: #cae682;">plist</span> <span style="color: #cae682;">version</span>=<span style="color: #95e454;">"1.0"</span>&gt;
  &lt;<span style="color: #cae682;">dict</span>&gt;
    &lt;<span style="color: #cae682;">key</span>&gt;Label&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;me.ericb.openconnect-example&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Specify that the password, stored in <code>/etc/openconnect/passwd-example</code>, will be
supplied via stdin.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;StandardInPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/etc/openconnect/passwd-example&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Use the wrapper defined above.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;ProgramArguments&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">array</span>&gt;
      &lt;<span style="color: #cae682;">string</span>&gt;/etc/openconnect-wrapper&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Tell <code>openconnect</code> we're supplying the password via stdin.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--passwd-on-stdin&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the OpenConnect protocol to AnyConnect.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--protocol=anyconnect&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the reconnect timeout to <code>1800</code> seconds.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--reconnect-timeout=1800&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Set the username.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;--user=alice&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Finally, specify the VPN server hostname.
</p>
<div class="org-src-container">
<pre class="src src-xml">      &lt;<span style="color: #cae682;">string</span>&gt;vpn.example.com&lt;/<span style="color: #cae682;">string</span>&gt;
    &lt;/<span style="color: #cae682;">array</span>&gt;
</pre>
</div>

<p>
Configure log files for debugging.
</p>
<div class="org-src-container">
<pre class="src src-xml">    &lt;<span style="color: #cae682;">key</span>&gt;StandardOutPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/var/log/me.ericb.openconnectconsole.log&lt;/<span style="color: #cae682;">string</span>&gt;
    &lt;<span style="color: #cae682;">key</span>&gt;StandardErrorPath&lt;/<span style="color: #cae682;">key</span>&gt;
    &lt;<span style="color: #cae682;">string</span>&gt;/var/log/me.ericb.openconnect/error.log&lt;/<span style="color: #cae682;">string</span>&gt;
</pre>
</div>

<p>
Close the open XML tags.
</p>
<div class="org-src-container">
<pre class="src src-xml">  &lt;/<span style="color: #cae682;">dict</span>&gt;
&lt;/<span style="color: #cae682;">plist</span>&gt;
</pre>
</div>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>Spooky Security</title>
    <link href="https://blorg.ericb.me/2018/09/spooky-security/index.html" />
    <id>https://blorg.ericb.me/2018/09/spooky-security/index.html</id>
    <published>2018-09-07T00:00:00Z</published>
    <updated>2018-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  7 September, 2018


      <br />
      Tags: <a title="All pages tagged &#39;darwin&#39;." href="/tag/darwin/index.html" rel="tag">darwin</a>, <a title="All pages tagged &#39;keyboard&#39;." href="/tag/keyboard/index.html" rel="tag">keyboard</a>, <a title="All pages tagged &#39;security&#39;." href="/tag/security/index.html" rel="tag">security</a>, <a title="All pages tagged &#39;skhd&#39;." href="/tag/skhd/index.html" rel="tag">skhd</a>, <a title="All pages tagged &#39;chunkwm&#39;." href="/tag/chunkwm/index.html" rel="tag">chunkwm</a>

    </span>
  </p>
</section>
<section>
  <p>
<b>Update (21 September, 2018)</b>: It turns out <a href="https://github.com/keybase/client">Keybase.app</a> was to blame. I've since
quit it and removed it from my login items, and all is well again.  This
<a href="https://github.com/koekeishiya/skhd/issues/48">skhd issue thread</a> details some excellent debugging strategies, which I've
modified slightly here.
</p>

<div class="org-src-container">
<pre class="src src-sh">ioreg -lw 0 <span style="color: #95e454;">\</span>
    | perl -nle <span style="color: #95e454;">'print $1 if /"kCGSSessionSecureInputPID"=(\d+)/'</span> <span style="color: #95e454;">\</span>
    | uniq <span style="color: #95e454;">\</span>
    | xargs ps -o <span style="color: #cae682;">comm</span>= -p
</pre>
</div>

<p>
For example, when I enable secure keyboard entry in <code>Terminal.app</code>, I see the
following output.
</p>

<pre class="example" id="orgb948b55">
/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal
</pre>

<hr>

<p>
I've been using <a href="https://koekeishiya.github.io/chunkwm/">chunkwm</a> and <a href="https://github.com/koekeishiya/skhd">skhd</a> to help make Darwin more palatable, but <code>skhd</code>
suddenly stopped working. When I try to start it manually, I get the following
error.
</p>

<pre class="example" id="org9beed48">
skhd: secure keyboard entry is enabled! abort..
</pre>

<p>
<a href="https://github.com/koekeishiya/skhd/issues/48">The internet suggested</a> I disable <a href="https://iterm2.com/">iTerm 2</a>'s <i>Secure Keyboard Entry</i>, but I've
switched to <a href="https://sw.kovidgoyal.net/kitty/">kitty</a>.
</p>

<p>
After some further frantic <a href="https://duckduckgo.com/">DuckDuckGo</a>-ing, I came across a function,
<code>DisableSecureEventInput</code>, which seemed like the answer, so I wrote a quick
program to call it and try to end my troubles.
</p>

<div class="org-src-container">
<pre class="src src-c"><span style="color: #e5786d;">#include</span> <span style="color: #8c8c8c;">&lt;</span><span style="color: #95e454;">Carbon/Carbon.h</span><span style="color: #8c8c8c;">&gt;</span>


<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">main</span><span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">argc</span>, <span style="color: #8ac6f2; font-weight: bold;">const</span> <span style="color: #92a65e; font-weight: bold;">char</span> *<span style="color: #cae682;">argv</span><span style="color: #93a8c6;">[]</span><span style="color: #8c8c8c;">)</span>
<span style="color: #8c8c8c;">{</span>
    <span style="color: #8ac6f2; font-weight: bold;">if</span> <span style="color: #93a8c6;">(</span>IsSecureEventInputEnabled<span style="color: #b0b1a3;">()</span><span style="color: #93a8c6;">)</span>
        printf<span style="color: #93a8c6;">(</span><span style="color: #95e454;">"Secure keyboard entry is enabled.\n"</span><span style="color: #93a8c6;">)</span>;

    DisableSecureEventInput<span style="color: #93a8c6;">()</span>;

    <span style="color: #8ac6f2; font-weight: bold;">if</span> <span style="color: #93a8c6;">(</span>IsSecureEventInputEnabled<span style="color: #b0b1a3;">()</span><span style="color: #93a8c6;">)</span>
        printf<span style="color: #93a8c6;">(</span><span style="color: #95e454;">"Secure keyboard entry is still enabled.\n"</span><span style="color: #93a8c6;">)</span>;


    <span style="color: #8ac6f2; font-weight: bold;">return</span> 0;
<span style="color: #8c8c8c;">}</span>
</pre>
</div>

<pre class="example">
Secure keyboard entry is enabled.
Secure keyboard entry is still enabled.
</pre>


<p>
No such luck. I'm <a href="https://www.youtube.com/watch?v%3DqjGjuiFKE04">literally dying</a>.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>Undefined Behaviour</title>
    <link href="https://blorg.ericb.me/2018/05/undefined-behaviour/index.html" />
    <id>https://blorg.ericb.me/2018/05/undefined-behaviour/index.html</id>
    <published>2018-05-07T00:00:00Z</published>
    <updated>26 August, 2024</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  7 May, 2018

      <br />
      Updated on 26 August, 2024


      <br />
      Tags: <a title="All pages tagged &#39;c&#39;." href="/tag/c/index.html" rel="tag">c</a>, <a title="All pages tagged &#39;compilers&#39;." href="/tag/compilers/index.html" rel="tag">compilers</a>, <a title="All pages tagged &#39;school&#39;." href="/tag/school/index.html" rel="tag">school</a>, <a title="All pages tagged &#39;facepalm&#39;." href="/tag/facepalm/index.html" rel="tag">facepalm</a>

    </span>
  </p>
</section>
<section>
  <p>
A friend at work today was telling me about his wife's C​<code>++</code> class, wherein the
students were asked to predict the behaviour of the following snippet.
</p>

<div class="org-src-container">
<pre class="src src-c" id="orgee35afe">x = 10;
y = ++x + --x;
</pre>
</div>
<section id="outline-container-org0c8fbd7" class="outline-2">
<h2 id="org0c8fbd7">Example</h2>
<div class="outline-text-2" id="text-org0c8fbd7">
<p>
For simplicity, let's assume the type of both <code>x</code> and <code>y</code> is <code>int</code>.
</p>
<div class="org-src-container">
<pre class="src src-c" id="orgb948b55"><span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">x</span>, <span style="color: #cae682;">y</span>;
</pre>
</div>

<p>
We can inspect the final state of <code>x</code> and <code>y</code> with a simple <code>printf</code> call.
</p>
<div class="org-src-container">
<pre class="src src-c" id="orgfa898cb">printf<span style="color: #8c8c8c;">(</span><span style="color: #95e454;">"x = %d, y = %d\n"</span>, x, y<span style="color: #8c8c8c;">)</span>;
</pre>
</div>

<p>
Now, let's see how different compilers handle <a href="https://github.com/yurrriq/blorg/blob/main/hakyll/code/incdec.c">our program</a>.
</p>
<div class="org-src-container">
<pre class="src src-c"><span style="color: #e5786d;">#include</span> <span style="color: #8c8c8c;">&lt;</span><span style="color: #95e454;">stdio.h</span><span style="color: #8c8c8c;">&gt;</span>


<span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">main</span><span style="color: #8c8c8c;">(</span><span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">argc</span>, <span style="color: #92a65e; font-weight: bold;">char</span> **<span style="color: #cae682;">argv</span><span style="color: #8c8c8c;">)</span>
<span style="color: #8c8c8c;">{</span>
    <span style="color: #92a65e; font-weight: bold;">int</span> <span style="color: #cae682;">x</span>, <span style="color: #cae682;">y</span>;
    x = 10;
    y = ++x + --x;

    printf<span style="color: #93a8c6;">(</span><span style="color: #95e454;">"x = %d, y = %d\n"</span>, x, y<span style="color: #93a8c6;">)</span>;
<span style="color: #8c8c8c;">}</span>
</pre>
</div>

<p>
At first glance, I would expect the right-hand side of the initialization of <code>y</code>
to evaluate to <code>11 + 10</code>, i.e., <code>21</code>.
</p>

<pre class="example">
gcc (GCC) 13.2.0

incdec.c: In function ‘main’:
incdec.c:8:9: warning: operation on ‘x’ may be undefined [-Wsequence-point]
    8 |     y = ++x + --x;
      |         ^~~

x = 10, y = 20
</pre>
</div>
</section>
<section id="outline-container-orga55bdd4" class="outline-2">
<h2 id="orga55bdd4">Curiouser and curiouser!</h2>
<div class="outline-text-2" id="text-orga55bdd4">
<p>
Unsurprisingly, GCC computes the final value of <code>x</code> to be <code>10</code>, the same as its
initial value, after being incremented and decremented. It's markedly <b>less</b>
intuitive to me that the final value of <code>y</code> is <code>20</code>.
</p>

<p>
Clang, on the other hand, agrees with me, i.e., computes the final value of <code>y</code>
to be <code>21</code>.
</p>

<pre class="example">
clang version 17.0.6

incdec.c:8:9: warning: multiple unsequenced modifications to 'x' [-Wunsequenced]
    8 |     y = ++x + --x;
      |         ^     ~~
1 warning generated.

x = 10, y = 21
</pre>
</div>
</section>
<section id="outline-container-org1520f12" class="outline-2">
<h2 id="org1520f12">The more you know</h2>
<div class="outline-text-2" id="text-org1520f12">
<p>
Both compilers warn about unsequenced modifications and the resultant undefined
behaviour. Digging around a bit leads to some fascinating discussions. The GCC
team maintains a <a href="https://gcc.gnu.org/readings.html">list of further reading</a>, including a few formal models and
analyses of sequence points in C. Further exploration is left as an exercise for
the reader.
</p>
</div>
<div id="outline-container-org79c4fb7" class="outline-3">
<h3 id="org79c4fb7">tl;dr</h3>
<div class="outline-text-3" id="text-org79c4fb7">
<blockquote cite="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html" id="orgff52af2">
<p>
It is not specified when between sequence points modifications to the values of
objects take effect.
</p>

<p>
⋯
</p>

<p>
The standard is worded confusingly, therefore there is some debate over the
precise meaning of the sequence point rules in subtle cases.
</p>
<footer><a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html">Free Software Foundation, Inc., GCC online documentation, 3.8 Options to Request or Suppress Warnings</a></footer></blockquote>
</div>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>Proving Addition is Commutative in Idris</title>
    <link href="https://blorg.ericb.me/2016/09/proving-addition-is-commutative-in-idris/index.html" />
    <id>https://blorg.ericb.me/2016/09/proving-addition-is-commutative-in-idris/index.html</id>
    <published>2016-09-07T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on  7 September, 2016

      <br />
      Updated on 18 December, 2023


      <br />
      Tags: <a title="All pages tagged &#39;idris&#39;." href="/tag/idris/index.html" rel="tag">idris</a>, <a title="All pages tagged &#39;theorem-proving&#39;." href="/tag/theorem-proving/index.html" rel="tag">theorem-proving</a>, <a title="All pages tagged &#39;books&#39;." href="/tag/books/index.html" rel="tag">books</a>

    </span>
  </p>
</section>
<section>
  <p>
First off, I think <a href="http://www.idris-lang.org">Idris</a> is pretty great. Over the past several months, I've
been thoroughly enjoying reading and working through <a href="https://www.manning.com/books/type-driven-development-with-idris"><i>Type-Driven Development
with Idris</i></a>, as well as chatting with the community on IRC.
<label for='mn-auto.6293918' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.6293918' class='margin-toggle'><span class='marginnote'> <code>#idris</code> on freenode </span>
</p>
<section id="outline-container-orgee35afe" class="outline-2">
<h2 id="orgee35afe">Posting to the MEAP forum</h2>
<div class="outline-text-2" id="text-orgee35afe">
<p>
For every <a href="https://www.manning.com/meap-program">MEAP</a> book, Manning provides a forum. To be honest, though I've
partaken in quite a few MEAPs, I've never really participated in the fora. In
<a href="https://forums.manning.com/forums/type-driven-development-with-idris">the <i>Type-Driven Development with Idris</i> forum</a>, however, I've made a whopping
<b>two</b> posts so far. One was a clarifying question about a possible error in the
text and the other was an answer to a fellow reader's question. My answer seemed
like a good example of how Idris works, so I thought I'd turn it into a blog
post. Here goes.
</p>
</div>
</section>
<section id="outline-container-orgf4316c4" class="outline-2">
<h2 id="orgf4316c4">Proving it with Idris</h2>
<div class="outline-text-2" id="text-orgf4316c4">
<p>
In this example, we're trying to prove that addition of natural numbers is
<a href="https://en.wikipedia.org/wiki/Commutative_property">commutative</a>, i.e.
\[\forall n,m \in \mathbb{N}\ (n + m \equiv m + n)\]
&#x2026; which we can express in Idris as follows:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
</pre>
</div>

<p>
The type signature for <code class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span></code> can be read as something
like, "For all natural numbers <code>n</code> and <code>m</code>, <code>n</code> plus <code>m</code> is exactly equivalent
to <code>m</code> plus <code>n</code>."
</p>

<p>
Over-simplifying the <a href="https://en.wikipedia.org/wiki/Curry%25E2%2580%2593Howard_correspondence">Curry-Howard correspondence</a>, if we can write a <a href="https://en.wikipedia.org/wiki/Total_functional_programming">total
function</a> that satisfies the type signature, then we've effectively written a
proof for the corresponding <a href="https://en.wikipedia.org/wiki/Universal_quantification">universal quantification</a>.
</p>

<p>
Idris has some great interactive editing tools, so I'll try to show those off a
bit here too. For a start, we can call <code>idris-add-clause</code> (<code>M-RET d</code> in
<a href="http://spacemacs.org/layers/+lang/idris/README.html">Spacemacs</a>) to get:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs</span>
</pre>
</div>

<p>
The prefix <code>?</code> signifies a hole and in this case, the type of that hole is:
</p>
<div class="org-src-container">
<pre class="src src-idris">  <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
  <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
<span style="color: #99968b;">--------------------------------------</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
</pre>
</div>

<p>
Next, we can case split (<code>idris-case-split</code>, <code>M-RET c</code>) on <code>n</code>:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span>  <span style="color: #f6f3e8; background-color: #242424;">Z</span>    <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_1</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_2</span>
</pre>
</div>

<p>
For <code>?myPlusCommutative_rhs_1</code> we need to prove that \(m = m + 0\).
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs_1</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> 0
</pre>
</div>

<p>
Fortunately, the <code>Prelude</code> has a proof that's almost exactly what we want:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">plusZeroRightNeutral</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">+</span> 0 <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">left</span>
</pre>
</div>

<p>
Since we need to swap the left- and right-hand sides, we can use <code>sym</code>:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">sym</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">right</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">right</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">left</span>
</pre>
</div>

<p>
So the complete definition for the <a href="https://en.wikipedia.org/wiki/Mathematical_induction"><i>base case</i></a> of <code>myPlusCommutative</code> is:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span>  <span style="color: #f6f3e8; background-color: #242424;">Z</span>    <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">sym</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">plusZeroRightNeutral</span> <span style="color: #f6f3e8; background-color: #242424;">m</span><span style="color: #8c8c8c;">)</span>
</pre>
</div>

<p>
Next, we've got to tackle the <i>inductive step</i>. Since we know we'll need to
reduce to the <i>base case</i>, let's define a local variable <code>inductiveHypothesis</code>:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_2</span>
</pre>
</div>

<p>
Examining the type of <code>?myPlusCommutative_rhs_2</code>:
</p>
<div class="org-src-container">
<pre class="src src-idris">  <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
  <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span>
  <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>
  _<span style="color: #8ac6f2; font-weight: bold;">rewrite</span><span style="color: #f6f3e8; background-color: #242424;">_rule</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>
<span style="color: #99968b;">--------------------------------------</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs_2</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span>
</pre>
</div>

<p>
&#x2026; we see we need to prove the successor of \(k\) plus \(m\) is exactly equivalent
to \(m\) plus the successor of \(k\), i.e.
\[\forall m \in \mathbb{N}\ (S(k + m) \equiv m + S(k))\]
</p>

<p>
Prelude to the rescue, yet again:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span>
                    <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">right</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">right</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">left</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">right</span>
</pre>
</div>

<p>
Now we can <code>rewrite</code> the hole using <code>plusSuccRightSucc</code> with <code>m</code> as <code>left</code> and
<code>k</code> as <code>right</code>:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
            <span style="color: #f6f3e8; background-color: #242424;">?myPlusCommutative</span><span style="color: #f6f3e8; background-color: #242424;">_rhs_2</span>
</pre>
</div>

<p>
Eliding the repetitive bits, we get:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative_rhs_2</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">plus</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span>
</pre>
</div>

<p>
&#x2026; which looks like our old friend, <code>Refl</code>:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">Refl</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">x</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">x</span>
</pre>
</div>

<p>
At this point, Idris can fill in the hole for us, via <code>idris-proof-search</code>
(<code>M-RET p</code>):
</p>

<div class="org-src-container">
<pre class="src src-idris"><span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span>
  <span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">inductiveHypothesis</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
    <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
            <span style="color: #f6f3e8; background-color: #242424;">Refl</span>
</pre>
</div>
</div>
</section>
<section id="outline-container-org97f457e" class="outline-2">
<h2 id="org97f457e">The final product</h2>
<div class="outline-text-2" id="text-org97f457e">
<p>
Tidying up a bit for my taste, we arrive at the complete (and total) definition:
</p>
<div class="org-src-container">
<pre class="src src-idris"><span style="color: #99968b;">|||</span><span style="color: #95e454;"> Addition of natural numbers is commutative.</span>
<span style="color: #8ac6f2; font-weight: bold;">total</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #cae682;">:</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">n</span>, <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">:</span> <span style="color: #f6f3e8; background-color: #242424;">Nat</span><span style="color: #8c8c8c;">)</span> <span style="color: #cae682;">-&gt;</span> <span style="color: #f6f3e8; background-color: #242424;">n</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">+</span> <span style="color: #f6f3e8; background-color: #242424;">n</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span>  <span style="color: #f6f3e8; background-color: #242424;">Z</span>    <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #f6f3e8; background-color: #242424;">sym</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">plusZeroRightNeutral</span> <span style="color: #f6f3e8; background-color: #242424;">m</span><span style="color: #8c8c8c;">)</span>
<span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #8c8c8c;">(</span><span style="color: #f6f3e8; background-color: #242424;">S</span> <span style="color: #f6f3e8; background-color: #242424;">k</span><span style="color: #8c8c8c;">)</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #cae682;">=</span> <span style="color: #8ac6f2; font-weight: bold;">rewrite</span> <span style="color: #f6f3e8; background-color: #242424;">myPlusCommutative</span> <span style="color: #f6f3e8; background-color: #242424;">k</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #8ac6f2; font-weight: bold;">in</span>
                                    <span style="color: #f6f3e8; background-color: #242424;">plusSuccRightSucc</span> <span style="color: #f6f3e8; background-color: #242424;">m</span> <span style="color: #f6f3e8; background-color: #242424;">k</span>
</pre>
</div>
<p>
\(\square\)
</p>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>Bye Bye, Jekyll!</title>
    <link href="https://blorg.ericb.me/2016/05/bye-bye-jekyll/index.html" />
    <id>https://blorg.ericb.me/2016/05/bye-bye-jekyll/index.html</id>
    <published>2016-05-29T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 29 May, 2016

      <br />
      Updated on 18 December, 2023


      <br />
      Tags: <a title="All pages tagged &#39;blogging&#39;." href="/tag/blogging/index.html" rel="tag">blogging</a>, <a title="All pages tagged &#39;haskell&#39;." href="/tag/haskell/index.html" rel="tag">haskell</a>, <a title="All pages tagged &#39;open-source&#39;." href="/tag/open-source/index.html" rel="tag">open-source</a>

    </span>
  </p>
</section>
<section>
  <p>
Back in December of 2014, I set up a blog using <a href="https://ghost.org">Ghost</a> and <a href="https://github.com/axitkhurana/buster/">Buster</a>. That was all
fine and good, but left quite a bit to be desired. I'm not a Python user and the
whole workflow was a bit too clunky for my taste.
</p>
<section id="outline-container-org0ce0959" class="outline-2">
<h2 id="org0ce0959">Migrating to Jekyll</h2>
<div class="outline-text-2" id="text-org0ce0959">
<p>
In July of 2015, I decided to migrate to <a href="https://jekyllrb.com">Jekyll</a>. It's pretty widely used and the
integration with <a href="https://pages.github.com">GitHub Pages</a> promised to be smooth and easy.  In practice, I
found its workflow to be similarly annoying. Worst of all, it made me install,
write and use Ruby.<label for='mn-auto.9790334' class='margin-toggle'>&#8853;</label><input type='checkbox' id='mn-auto.9790334' class='margin-toggle'><span class='marginnote'> I'm a long-time Ruby hater. <a href="https://twitter.com/search?q=%2523sorrynotsorry">#sorrynotsorry</a> </span>
</p>

<p>
What's more, GitHub seems to have a predilection for breaking things so often
and dramatically, that <a href="https://github.com/lfex/dragon">dragon</a> was born.
</p>
</div>
</section>
<section id="outline-container-org9639605" class="outline-2">
<h2 id="org9639605">Migrating to Hakyll</h2>
<div class="outline-text-2" id="text-org9639605">
<p>
<a href="http://haskellbook.com">Learning Haskell</a> has been a <a href="https://www.youtube.com/watch?v=-1YjmXSyHa8">fantastic voyage</a>. Although I've not yet used it for
any "real" projects, I'm sold on its expressivity and general
mind-expanding-ness. I had seen <a href="https://jaspervdj.be/hakyll/">Hakyll</a> pop up on my radar a few times and
considered migrating to it for quite a while. Last night, I finally made the
leap. The experience was so great, I can't believe I didn't do it sooner.
</p>

<p>
From now on, my blog will be powered by <a href="https://jaspervdj.be/hakyll/">Hakyll</a>.
<label for="mn-dragon" class="margin-toggle"></label>
<input type="checkbox" id="mn-dragon" class="margin-toggle"/>
<span class="marginnote">
&#x2026; at least until <a href="https://github.com/lfex/dragon">dragon</a> matures, or I find an even better alternative.
</span>
</p>

<p>
You can find my <a href="https://github.com/yurrriq/blorg/blob/master/hakyll/site.hs"><code>site.hs</code></a>, which will undoubtedly grow and change over time, on
<a href="https://github.com/yurrriq/blorg">GitHub</a>.
</p>

<p>
Good riddance.
</p>
</div>
</section>

</section>
]]></summary>
</entry>
<entry>
    <title>Tracing LFE Functions</title>
    <link href="https://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html" />
    <id>https://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html</id>
    <published>2016-04-12T00:00:00Z</published>
    <updated>18 December, 2023</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-post-metadata" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-post-metadata" class="margin-toggle"/>
    <span class="marginnote">
      Written on 12 April, 2016

      <br />
      Updated on 18 December, 2023


      <br />
      Tags: <a title="All pages tagged &#39;lfe&#39;." href="/tag/lfe/index.html" rel="tag">lfe</a>, <a title="All pages tagged &#39;lisp&#39;." href="/tag/lisp/index.html" rel="tag">lisp</a>, <a title="All pages tagged &#39;beam&#39;." href="/tag/beam/index.html" rel="tag">beam</a>, <a title="All pages tagged &#39;tracing&#39;." href="/tag/tracing/index.html" rel="tag">tracing</a>, <a title="All pages tagged &#39;debugging&#39;." href="/tag/debugging/index.html" rel="tag">debugging</a>

    </span>
  </p>
</section>
<section>
  <p>
What follows is an LFE translation of Roberto Aloi's <a href="https://web.archive.org/web/20150906072604/https://aloiroberto.wordpress.com/2009/02/23/tracing-erlang-functions/"><i>Tracing Erlang Functions</i></a>.
</p>

<p>
Tracing LFE functions for debugging purposes is quite simple.
</p>

<p>
Let's say you have the following module and want to trace one of its functions.
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgee35afe">(<span style="color: #8ac6f2; font-weight: bold;">defmodule</span> <span style="color: #92a65e; font-weight: bold;">maths</span>
  (export (sum 2) (diff 2)))

(<span style="color: #8ac6f2; font-weight: bold;">defun</span> <span style="color: #cae682;">sum</span> (a b) (<span style="color: #e5786d;">+</span> a b))

(<span style="color: #8ac6f2; font-weight: bold;">defun</span> <span style="color: #cae682;">diff</span> (a b) (<span style="color: #e5786d;">-</span> a b))
</pre>
</div>

<p>
Before we get started, make sure you compile the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgb948b55">(c <span style="color: #95e454;">"/path/to/maths.lfe"</span>)
</pre>
</div>

<p>
Just start the tracer:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgfa898cb">(dbg:tracer)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok &lt;0.46.0&gt;)
</pre>
</div>

<p>
Tell the tracer you are interested in all calls for all processes:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgff52af2">(dbg:p 'all 'c)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 26)))
</pre>
</div>

<p>
Finally, tell it you want to trace the function, <code>sum</code>, from the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org72a3840">(dbg:tpl 'maths 'sum [])
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1)))
</pre>
</div>

<p>
Now, try to call the function, as usual. The tracer is active!
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgd9cd98a">(maths:sum 2 3)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">5
(&lt;0.29.0&gt;) call maths:sum(2,3)
</pre>
</div>

<p>
To trace all functions from the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org530237a">&gt; (dbg:tpl 'maths [])
</pre>
</div>

<p>
To trace the return value for a given function:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgbec9ad4">(dbg:tpl 'maths 'sum (<span style="color: #8ac6f2; font-weight: bold;">match-spec</span> ([_] (return_trace))))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1) #(saved 1)))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe" id="org39af42c">(maths:sum 19 23)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">42
(&lt;0.56.0&gt;) call maths:sum(19,23)
(&lt;0.56.0&gt;) returned from maths:sum/2 -&gt; 42
</pre>
</div>

<p>
To stop the trace:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org97f457e">(dbg:stop)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">ok
</pre>
</div>

</section>
]]></summary>
</entry>

</feed>
