<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - compilers</title>
    <link href="http://blorg.ericb.me/tag/compilers.atom" rel="self" />
    <link href="http://blorg.ericb.me" />
    <id>http://blorg.ericb.me/tag/compilers.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2018-05-07T00:00:00Z</updated>
    <entry>
    <title>Undefined Behaviour</title>
    <link href="http://blorg.ericb.me/2018/05/undefined-behaviour/index.html" />
    <id>http://blorg.ericb.me/2018/05/undefined-behaviour/index.html</id>
    <published>2018-05-07T00:00:00Z</published>
    <updated>2018-05-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
  Posted on  7 May, 2018
  
    by Eric Bailey
  
</div>

<div class="info">
  
  Tags: <a href="/tag/c/index.html">c</a>, <a href="/tag/compilers/index.html">compilers</a>, <a href="/tag/school/index.html">school</a>, <a href="/tag/facepalm/index.html">facepalm</a>
  
</div>

<p>
A friend at work today was telling me about his wife's C++ class,
wherein the students were asked to predict the behaviour of the
following snippet.
</p>

<div class="org-src-container">

<pre class="src src-c" id="unsequenced">x = 10;
y = ++x + --x;
</pre>
</div>

<p>
For simplicity, let's assume the type of both <code>x</code> and <code>y</code> is <code>int</code>.
</p>
<div class="org-src-container">

<pre class="src src-c" id="declarations"><span style="color: #66D9EF; font-weight: bold;">int</span> <span style="color: #FD971F;">x</span>, <span style="color: #FD971F;">y</span>;
</pre>
</div>

<p>
We can inspect the final state of <code>x</code> and <code>y</code> with a simple <code>printf</code> call.
</p>
<div class="org-src-container">

<pre class="src src-c" id="print-final-state">printf(<span style="color: #E6DB74;">"x = %d, y = %d\n"</span>, x, y);
</pre>
</div>

<p>
Now, let's see how different compilers handle <a href="https://github.com/yurrriq/blorg/blob/master/hakyll/code/incdec.c">our program</a>.
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #F92672;">#include</span> <span style="color: #E6DB74;">&lt;stdio.h&gt;</span>


<span style="color: #66D9EF; font-weight: bold;">int</span> <span style="color: #A6E22E;">main</span>(<span style="color: #66D9EF; font-weight: bold;">int</span> <span style="color: #FD971F;">argc</span>, <span style="color: #66D9EF; font-weight: bold;">char</span> **<span style="color: #FD971F;">argv</span>)
{
    x = 10;
    y = ++x + --x;

    printf(<span style="color: #E6DB74;">"x = %d, y = %d\n"</span>, x, y);
}
</pre>
</div>

<p>
At first glance, I would expect the right-hand side of the
initialization of <code>y</code> to evaluate to <code>11 + 10</code>, i.e. <code>21</code>.
</p>

<pre class="example">
gcc (GCC) 7.3.0

incdec.c: In function ‘main’:
incdec.c:9:9: warning: operation on ‘x’ may be undefined [-Wsequence-point]
     y = ++x + --x;
         ^~~

x = 10, y = 20
</pre>

<p>
Unsurprisingly, GCC computes the final value of <code>x</code> to be <code>10</code>, the
same as its initial value, after being incremented and
decremented.
</p>

<p>
It's markedly <b>less</b> intuitive to me that the final value of <code>y</code> is
<code>20</code>.
</p>

<p>
Clang, on the other hand, agrees with me, i.e. computes the final
value of <code>y</code> to be <code>21</code>.
</p>

<pre class="example">
clang version 5.0.1 (tags/RELEASE_501/final)

incdec.c:9:9: warning: multiple unsequenced modifications to 'x' [-Wunsequenced]
    y = ++x + --x;
        ^     ~~
1 warning generated.

x = 10, y = 21
</pre>

<p>
Both compilers warn about unsequenced modifications and the resultant
undefined behaviour. Digging around a bit leads to some fascinating
discussions. The GCC team maintains a <a href="https://gcc.gnu.org/readings.html">list of further reading</a>, include
a few formal models and analyses of sequence points in C. Further
exploration is left as an exercise for the reader.
</p>

<p>
<b>tl;dr</b> (from <a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html">https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html</a>)
</p>

<blockquote>
<p>
It is not specified when between sequence points modifications to the
values of objects take effect.
</p>
</blockquote>

<blockquote>
<p>
The standard is worded confusingly, therefore there is some debate
over the precise meaning of the sequence point rules in subtle cases.
</p>
</blockquote>

]]></summary>
</entry>

</feed>
