<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - clojure</title>
    <link href="http://blorg.ericb.me/tag/clojure.atom" rel="self" />
    <link href="http://blorg.ericb.me" />
    <id>http://blorg.ericb.me/tag/clojure.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2015-07-13T00:00:00Z</updated>
    <entry>
    <title>Unable to find dad</title>
    <link href="http://blorg.ericb.me/2015/07/unable-to-find-dad/index.html" />
    <id>http://blorg.ericb.me/2015/07/unable-to-find-dad/index.html</id>
    <published>2015-07-13T00:00:00Z</published>
    <updated>2015-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 13 July, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/error/index.html">error</a>
      
    </span>
  </p>
</section>
<section>
  <pre class="example">
  Show: Clojure Java REPL Tooling Duplicates All  (65 frames hidden)

2. Unhandled clojure.lang.Compiler$CompilerException

1. Caused by java.lang.RuntimeException
   Unable to resolve symbol: dad in this context

                     Util.java:  221  clojure.lang.Util/runtimeException
</pre>

<p>
Whoa, that's heavy, man.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>ip.ericb.me</title>
    <link href="http://blorg.ericb.me/2015/07/ip.ericb.me/index.html" />
    <id>http://blorg.ericb.me/2015/07/ip.ericb.me/index.html</id>
    <published>2015-07-13T00:00:00Z</published>
    <updated>2015-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 13 July, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/hack/index.html">hack</a>, <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/web-service/index.html">web-service</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
As a follow-up to <a href="http://blorg.ericb.me/2014/12/icanhazip.com">my previous post about icanhazip.com</a>, I figured it bears
mentioning I've since set up <a href="https://github.com/yurrriq/what-is-my-ip">my own IP echo service</a> and am running it at
<a href="http://ip.ericb.me">ip.ericb.me</a>.
</p>


<p>
Its excruciatingly simple Clojure source looks something like this:
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #8c8c8c;">(</span><span style="color: #8ac6f2; font-weight: bold;">defroutes</span> <span style="color: #cae682;">app</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #e5786d;">GET</span> <span style="color: #95e454;">"/"</span> <span style="color: #b0b1a3;">{</span><span style="color: #97b098;">{</span>x-real-ip <span style="color: #95e454;">"x-real-ip"</span><span style="color: #97b098;">}</span> <span style="color: #e5786d;">:headers</span><span style="color: #b0b1a3;">}</span>&#57344;&#57345;&#57345;
    <span style="color: #b0b1a3;">{</span><span style="color: #e5786d;">:status</span>  200&#57344;&#57345;&#57345;
     <span style="color: #e5786d;">:headers</span> <span style="color: #97b098;">{</span><span style="color: #95e454;">"Content-Type"</span> <span style="color: #95e454;">"text/plain"</span><span style="color: #97b098;">}</span>&#57344;&#57345;&#57345;
     <span style="color: #e5786d;">:body</span>    x-real-ip<span style="color: #b0b1a3;">}</span><span style="color: #93a8c6;">)</span><span style="color: #8c8c8c;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
<span style="color: #8c8c8c;">(</span><span style="color: #8ac6f2; font-weight: bold;">defn</span> <span style="color: #cae682;">-main</span> <span style="color: #93a8c6;">[</span>&amp; args<span style="color: #93a8c6;">]</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">-&gt;&gt;</span> <span style="color: #b0b1a3;">(</span><span style="color: #8ac6f2; font-weight: bold;">or</span> <span style="color: #97b098;">(</span>some-&gt; <span style="color: #aebed8;">(</span>env <span style="color: #e5786d;">:port</span><span style="color: #aebed8;">)</span> <span style="color: #aebed8;">(</span><span style="color: #92a65e; font-weight: bold;">Integer</span><span style="color: #f6f3e8; background-color: #242424;">/</span><span style="color: #e5786d;">parseInt</span><span style="color: #aebed8;">)</span><span style="color: #97b098;">)</span> 5000<span style="color: #b0b1a3;">)</span>&#57344;&#57345;&#57345;
       <span style="color: #b0b1a3;">(</span>hash-map <span style="color: #e5786d;">:port</span><span style="color: #b0b1a3;">)</span>&#57344;&#57345;&#57345;
       <span style="color: #b0b1a3;">(</span>run-server app<span style="color: #b0b1a3;">)</span><span style="color: #93a8c6;">)</span><span style="color: #8c8c8c;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>GitHub Languages</title>
    <link href="http://blorg.ericb.me/2015/05/github-languages/index.html" />
    <id>http://blorg.ericb.me/2015/05/github-languages/index.html</id>
    <published>2015-05-02T00:00:00Z</published>
    <updated>2015-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  2 May, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/hack/index.html">hack</a>, <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/script/index.html">script</a>, <a href="/tag/polyglot/index.html">polyglot</a>
      
    </span>
  </p>
</section>
<section>
  <p>
I wrote a little <a href="http://clojure.org">Clojure</a> script
<label for="sn-clojurescript"
       class="margin-toggle">
&#8853;
</label>
<input type="checkbox"
       id="sn-clojurescript"
       class="margin-toggle"/>
<span class="marginnote">
Not to be confused with
<a href="https://github.com/clojure/clojurescript">ClojureScript</a>.
</span>
to gather the language usage data from
<a href="https://github.com/yurrriq?tab=repositories">my GitHub repos</a> and
sort them in descending order of popularity.

<div class="org-src-container">

<pre class="src src-json">{
  "Ruby" : 4401525,
  "Java" : 1800870,
  "Clojure" : 1406457,
  "LilyPond" : 226858,
  "Scheme" : 224389,
  "Common Lisp" : 127554,
  "HTML" : 111217,
  "Shell" : 47589,
  "CSS" : 41034,
  "Groff" : 25188,
  "C++" : 16378,
  "NewLisp" : 15399,
  "JavaScript" : 12714,
  "Erlang" : 8041,
  "Objective-C" : 3825,
  "Python" : 3285,
  "Perl6" : 2976,
  "PLSQL" : 2919,
  "Scala" : 2814,
  "Emacs Lisp" : 2420,
  "OCaml" : 2055,
  "Elixir" : 1788,
  "CoffeeScript" : 1787,
  "PHP" : 1704,
  "CMake" : 1618,
  "Lua" : 1160,
  "Go" : 1025,
  "Perl" : 844,
  "Haskell" : 801,
  "F#" : 799,
  "C#" : 585,
  "PostScript" : 485,
  "Swift" : 467,
  "Makefile" : 220,
  "Frege" : 53
}
</pre>
</div>

<p>
<b>Note</b>: I don't use Ruby, except when <a href="https://www.openhub.net/p/homebrew/contributors/2025442152889863">contributing</a> to <a href="http://brew.sh/">Homebrew</a>. I also have a
repo or two of <a href="https://github.com/yurrriq/exercism">polyglot coding exercises</a>, which, of course, skew the results.
</p>

<p>
For the script and an example config, check out <a href="https://gist.github.com/yurrriq/3272c6b9ebfa699472b9">the gist</a>.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>exercism.io</title>
    <link href="http://blorg.ericb.me/2015/01/exercism.io/index.html" />
    <id>http://blorg.ericb.me/2015/01/exercism.io/index.html</id>
    <published>2015-01-03T00:00:00Z</published>
    <updated>2015-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  3 January, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/learning/index.html">learning</a>, <a href="/tag/polyglot/index.html">polyglot</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
<a href="http://xkcd.com/353/">Hello, world!</a> I started working on the <a href="http://exercism.io/languages/clojure">Clojure exercises</a> from <a href="http://exercism.io/about">exercism.io</a>.
</p>

<p>
Feel free to nitpick <a href="http://exercism.io/yurrriq">my solutions</a>, and browse the <a href="https://github.com/yurrriq/exercism/tree/clojure">source on GitHub</a>.
</p>

<p>
Maybe this will prove to be a fun way to explore <a href="https://github.com/yurrriq/exercism/branches/all">different languages</a>.
</p>

</section>
]]></summary>
</entry>
<entry>
    <title>#'clojure.core/some-> and the Power of Macros</title>
    <link href="http://blorg.ericb.me/2015/01/the-power-of-macros/index.html" />
    <id>http://blorg.ericb.me/2015/01/the-power-of-macros/index.html</id>
    <published>2015-01-02T00:00:00Z</published>
    <updated>2015-01-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  2 January, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/clojure/index.html">clojure</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/metaprogramming/index.html">metaprogramming</a>
      
    </span>
  </p>
</section>
<section>
  <p>
<a href="http://calculist.org/blog/2012/04/17/homoiconicity-isnt-the-point/">Homoiconicity</a>, and <a href="https://twitter.com/yurrriq/status/536036269222936576">metaprogramming</a>, and <a href="http://learnxinyminutes.com/docs/clojure-macros/">macros</a>! Oh my!
</p>

<p>
In 2015, my love for these <a href="http://xkcd.com/297/">elegant weapons</a> will undoubtedly <a href="https://twitter.com/yurrriq/status/525703812833890305">grow fonder</a>.
</p>

<div class="org-src-container">

<pre class="src src-clojure"><span style="color: #8c8c8c;">(</span>comment&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">#'clojure.core/some-&gt; is one my favorite Clojure macros.</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span>some-&gt; <span style="color: #b0b1a3;">(</span>meta #'<span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span>some-&gt;<span style="color: #b0b1a3;">)</span> <span style="color: #e5786d;">:doc</span> println<span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">When expr is not nil, threads it into the first form (via -&gt;),</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">and when that result is not nil, through the next etc</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span>macroexpand '<span style="color: #b0b1a3;">(</span>some-&gt; <span style="color: #97b098;">(</span>meta #'<span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span>some-&gt;<span style="color: #97b098;">)</span> <span style="color: #e5786d;">:doc</span> println<span style="color: #b0b1a3;">)</span><span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">let*</span> <span style="color: #b0b1a3;">[</span><span style="color: #e5786d;">G__2986</span> <span style="color: #97b098;">(</span>meta <span style="color: #aebed8;">(</span><span style="color: #8ac6f2; font-weight: bold;">var</span> <span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span>some-&gt;<span style="color: #aebed8;">)</span><span style="color: #97b098;">)</span>&#57344;&#57345;&#57345;
         <span style="color: #e5786d;">G__2986</span> <span style="color: #97b098;">(</span><span style="color: #8ac6f2; font-weight: bold;">if</span> <span style="color: #aebed8;">(</span><span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span>nil? <span style="color: #e5786d;">G__2986</span><span style="color: #aebed8;">)</span>&#57344;&#57345;&#57345;
                   <span style="color: #e5786d;">nil</span>&#57344;&#57345;&#57345;
                   <span style="color: #aebed8;">(</span><span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span><span style="color: #8ac6f2; font-weight: bold;">-&gt;</span> <span style="color: #e5786d;">G__2986</span> <span style="color: #e5786d;">:doc</span><span style="color: #aebed8;">)</span><span style="color: #97b098;">)</span>&#57344;&#57345;&#57345;
         <span style="color: #e5786d;">G__2986</span> <span style="color: #97b098;">(</span><span style="color: #8ac6f2; font-weight: bold;">if</span> <span style="color: #aebed8;">(</span><span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span>nil? <span style="color: #e5786d;">G__2986</span><span style="color: #aebed8;">)</span>&#57344;&#57345;&#57345;
                   <span style="color: #e5786d;">nil</span>&#57344;&#57345;&#57345;
                   <span style="color: #aebed8;">(</span><span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span><span style="color: #8ac6f2; font-weight: bold;">-&gt;</span> <span style="color: #e5786d;">G__2986</span> println<span style="color: #aebed8;">)</span><span style="color: #97b098;">)</span><span style="color: #b0b1a3;">]</span>&#57344;&#57345;&#57345;
    <span style="color: #e5786d;">G__2986</span><span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">Rewritten more readably to illustrate the point:</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #b0b1a3;">[</span>example <span style="color: #97b098;">(</span>meta #'<span style="color: #92a65e; font-weight: bold;">clojure.core</span><span style="color: #f6f3e8; background-color: #242424;">/</span>some-&gt;<span style="color: #97b098;">)</span>&#57344;&#57345;&#57345;
        example <span style="color: #97b098;">(</span><span style="color: #8ac6f2; font-weight: bold;">when-not</span> <span style="color: #aebed8;">(</span>nil? example<span style="color: #aebed8;">)</span>&#57344;&#57345;&#57345;
                  <span style="color: #aebed8;">(</span><span style="color: #e5786d;">:doc</span> example<span style="color: #aebed8;">)</span><span style="color: #97b098;">)</span>&#57344;&#57345;&#57345;
        example <span style="color: #97b098;">(</span><span style="color: #8ac6f2; font-weight: bold;">when-not</span> <span style="color: #aebed8;">(</span>nil? example<span style="color: #aebed8;">)</span>&#57344;&#57345;&#57345;
                  <span style="color: #aebed8;">(</span>println example<span style="color: #aebed8;">)</span><span style="color: #97b098;">)</span><span style="color: #b0b1a3;">]</span>&#57344;&#57345;&#57345;
    example<span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">Which brings me to another of my scattered thoughts,</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">Clojure has the #'clojure.core/when-not macro, but</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">for some reason, I find myself wanting to use 'unless,</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">as in Common Lisp:</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">defmacro</span> <span style="color: #cae682;">unless</span> <span style="color: #b0b1a3;">(</span>condition &amp;rest body<span style="color: #b0b1a3;">)</span>&#57344;&#57345;&#57345;
    `<span style="color: #b0b1a3;">(</span><span style="color: #8ac6f2; font-weight: bold;">if</span> <span style="color: #97b098;">(</span>not ,condition<span style="color: #97b098;">)</span> <span style="color: #97b098;">(</span>progn ,@body<span style="color: #97b098;">)</span><span style="color: #b0b1a3;">)</span><span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">What better excuse to start writing my own macros?</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">ns</span> <span style="color: #92a65e; font-weight: bold;">fastidious.macros</span><span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">defmacro</span> <span style="color: #cae682;">unless</span>&#57344;&#57345;&#57345;
    <span style="color: #b0b1a3;">[</span>condition &amp; body<span style="color: #b0b1a3;">]</span> `<span style="color: #b0b1a3;">(</span><span style="color: #8ac6f2; font-weight: bold;">if</span> <span style="color: #97b098;">(</span>not ~condition<span style="color: #97b098;">)</span> <span style="color: #97b098;">(</span><span style="color: #8ac6f2; font-weight: bold;">do</span> ~@body<span style="color: #97b098;">)</span><span style="color: #b0b1a3;">)</span><span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">Side bonus: I used my desire for 'unless to drive</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">my experiments in integrating macros in ClojureScript,</span>&#57344;&#57345;&#57345;
  <span style="color: #99968b;">;; </span><span style="color: #99968b;">with underwhelming success. It just works.</span>&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">ns</span> <span style="color: #92a65e; font-weight: bold;">client.core</span>&#57344;&#57345;&#57345;
    <span style="color: #b0b1a3;">(</span><span style="color: #e5786d;">:require-macros</span> <span style="color: #97b098;">[</span><span style="color: #92a65e; font-weight: bold;">fastidious.macros</span> <span style="color: #e5786d;">:refer</span> <span style="color: #aebed8;">[</span>unless<span style="color: #aebed8;">]</span><span style="color: #97b098;">]</span><span style="color: #b0b1a3;">)</span><span style="color: #93a8c6;">)</span>&#57344;&#57345;&#57345;
&#57344;&#57345;&#57345;
  <span style="color: #93a8c6;">(</span><span style="color: #8ac6f2; font-weight: bold;">let</span> <span style="color: #b0b1a3;">[</span>lisp-is-lame? <span style="color: #e5786d;">false</span><span style="color: #b0b1a3;">]</span>&#57344;&#57345;&#57345;
    <span style="color: #b0b1a3;">(</span>unless lisp-is-lame?&#57344;&#57345;&#57345;
      <span style="color: #97b098;">(</span>println <span style="color: #95e454;">"IFL Lisp."</span><span style="color: #97b098;">)</span>&#57344;&#57345;&#57345;
      <span style="color: #97b098;">(</span>println <span style="color: #95e454;">"Next up: /c[ad]{1,5}r/"</span><span style="color: #97b098;">)</span><span style="color: #b0b1a3;">)</span><span style="color: #93a8c6;">)</span><span style="color: #8c8c8c;">)</span>&#57344;&#57345;&#57345;
</pre>
</div>

<p>
See also: <a href="https://github.com/clojure/clojure/blob/28509b8caa95537cddd31152b7603de4d866c951/src/clj/clojure/core.clj#L7204-L7213"><code>#'clojure.core/some-&gt;</code> source</a> on GitHub
</p>

</section>
]]></summary>
</entry>

</feed>
