<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>blorg.ericb.me - beam</title>
    <link href="https://blorg.ericb.me/tag/beam.atom" rel="self" />
    <link href="https://blorg.ericb.me" />
    <id>https://blorg.ericb.me/tag/beam.atom</id>
    <author>
        <name>Eric Bailey</name>
        <email>eric@ericb.me</email>
    </author>
    <updated>2016-04-12T00:00:00Z</updated>
    <entry>
    <title>Tracing LFE Functions</title>
    <link href="https://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html" />
    <id>https://blorg.ericb.me/2016/04/tracing-lfe-functions/index.html</id>
    <published>2016-04-12T00:00:00Z</published>
    <updated>2016-04-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 12 April, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/tracing/index.html">tracing</a>, <a href="/tag/debugging/index.html">debugging</a>
      
    </span>
  </p>
</section>
<section>
  <p>
What follows is an LFE translation of Roberto Aloi's <a href="https://aloiroberto.wordpress.com/2009/02/23/tracing-erlang-functions/"><i>Tracing Erlang Functions</i></a>.
</p>

<p>
Tracing LFE functions for debugging purposes is quite simple.
</p>

<p>
Let's say you have the following module and want to trace one of its functions.
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org0146c20">(defmodule maths
  (export (sum 2) (diff 2)))

(defun sum (a b) (+ a b))

(defun diff (a b) (- a b))
</pre>
</div>

<p>
Before we get started, make sure you compile the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org0c18fe2">(c "/path/to/maths.lfe")
</pre>
</div>

<p>
Just start the tracer:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org8a06fd9">(dbg:tracer)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok &lt;0.46.0&gt;)
</pre>
</div>

<p>
Tell the tracer you are interested in all calls for all processes:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org83deebc">(dbg:p 'all 'c)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 26)))
</pre>
</div>

<p>
Finally, tell it you want to trace the function, <code>sum</code>, from the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org75eadc3">(dbg:tpl 'maths 'sum [])
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1)))
</pre>
</div>

<p>
Now, try to call the function, as usual. The tracer is active!
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org7ac275e">(maths:sum 2 3)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">5
(&lt;0.29.0&gt;) call maths:sum(2,3)
</pre>
</div>

<p>
To trace all functions from the <code>maths</code> module:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgec039b9">&gt; (dbg:tpl 'maths [])
</pre>
</div>

<p>
To trace the return value for a given function:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="orgb4eeab7">(dbg:tpl 'maths 'sum (match-spec ([_] (return_trace))))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">#(ok (#(matched nonode@nohost 1) #(saved 1)))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe" id="org73f07db">(maths:sum 19 23)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">42
(&lt;0.56.0&gt;) call maths:sum(19,23)
(&lt;0.56.0&gt;) returned from maths:sum/2 -&gt; 42
</pre>
</div>

<p>
To stop the trace:
</p>
<div class="org-src-container">
<pre class="src src-lfe" id="org0b4dabe">(dbg:stop)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">ok
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>lfe-rebar3/compile updates</title>
    <link href="https://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html" />
    <id>https://blorg.ericb.me/2016/02/lfe-rebar3-compile-updates/index.html</id>
    <published>2016-02-11T00:00:00Z</published>
    <updated>2016-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 11 February, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/erlang/index.html">erlang</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/rebar3/index.html">rebar3</a>, <a href="/tag/tooling/index.html">tooling</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Since much of my time these days is spent <code>(or 'writing 'developing
'evangelizing)</code> <a href="http://lfe.io">LFE</a>, it should come as no surprise that I use the <a href="https://github.com/lfe-rebar3/compile">rebar3
compiler plugin</a> extensively. In doing so, I noticed it always recompiles every
<code>.lfe</code> file it finds, irrespective of the staleness of the corresponding <code>.beam</code>
file. Having <a href="https://www.rebar3.org/docs/basic-usage#building">compiled</a> a fair amount of vanilla Erlang via <code>rebar3</code>, I knew it
didn't have to be that way.
</p>

<p>
To further my quest, <a href="https://github.com/tsloughter">tristan__</a> pointed me to <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L45-L48">run/7</a>, specifically its use of
<code>[check_last_mod]</code>. Before I <a href="https://github.com/quasiquoting/lfe-compile">forked</a> <a href="https://github.com/lfe-rebar3/compile">lfe-rebar3/compile</a>, it was using <a href="https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L41-L43">run/4</a>,
which does <b>NOT</b> make use of <code>[check_last_mod]</code>, hence the unnecessary
recompilation.
</p>

<p>
<a href="https://github.com/lfe-rebar3/compile/blob/0.2.1/src/lr3_comp.erl#L74">lfe-rebar3/compile/src/lr3_comp.erl:74</a>
</p>
<div class="org-src-container">
<pre class="src src-erlang">rebar_base_compiler:run(Opts, [], Files, DoCompile).
</pre>
</div>

<p>
After some experimentation, and <a href="https://www.rebar3.org/docs/dependencies#checkout-dependencies">_checkouts</a> symlinking tricks, I came up with an
appropriate <code>run/7</code> incantation and made <a href="https://github.com/lfe-rebar3/compile/pull/5">a pull request</a>.
</p>

<p>
<a href="https://github.com/quasiquoting/lfe-compile/blob/0.3.0/src/lr3_comp.erl#L37-L39">quasiquoting/lfe-compile/src/lr3_comp.erl:37-39</a>
</p>
<div class="org-src-container">
<pre class="src src-erlang">rebar_base_compiler:run(Config, FirstFiles,
                        SourceDir, ".lfe", TargetDir, ".beam",
                        fun compile/3).
</pre>
</div>

<p>
With those changes, <code>rebar3 lfe compile</code> will now skip unmodified <code>.lfe</code>
files. Not only is this The Right Thingâ„¢ to do, but it should be <a href="https://xkcd.com/1205/">time saver</a> in
the long run.
</p>

<p>
Here's an example of the difference when compiling <a href="https://github.com/quasiquoting/lodox">Lodox</a>&#x2026;
</p>

<p>
&#x2026; using <code>run/4</code> via <a href="https://github.com/lfe-rebar3/compile/releases/tag/0.2.1">0.2.1</a>:
</p>
<div class="org-src-container">
<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example">
 ~~&gt;    Compiling ./src/lodox-html-writer.lfe ...
 ~~&gt;    Compiling ./src/lodox-p.lfe ...
 ~~&gt;    Compiling ./src/lodox-parse.lfe ...
 ~~&gt;    Compiling ./src/lodox-util.lfe ...
 ~~&gt;    Compiling ./src/lodox.lfe ...
 ~~&gt;    Compiling ./src/pandoc.lfe ...
 ~~&gt;    Compiling ./test/unit-lodox-tests.lfe ...
        1.39 real         1.14 user         0.24 sys
</pre>

<p>
&#x2026; using <code>run/7</code> via <a href="https://github.com/quasiquoting/lfe-compile/releases/tag/0.3.0">0.3.0</a>:
</p>
<div class="org-src-container">
<pre class="src src-bash">$ time rebar3 lfe compile
</pre>
</div>
<pre class="example">
        0.94 real         0.73 user         0.20 sys
</pre>

<p>
A little more :cow::poop: microbenchmarking on a proprietary work project:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #99968b;"># </span><span style="color: #99968b;">run/4</span>
        3.58 real         3.02 user         0.58 sys

<span style="color: #99968b;"># </span><span style="color: #99968b;">run/7</span>
        1.83 real         1.46 user         0.35 sys
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>So 2016. Much BEAM. Very polyglot.</title>
    <link href="https://blorg.ericb.me/2016/01/so-2016-much-beam-very-polyglot/index.html" />
    <id>https://blorg.ericb.me/2016/01/so-2016-much-beam-very-polyglot/index.html</id>
    <published>2016-01-01T00:00:00Z</published>
    <updated>2016-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  1 January, 2016
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/elixir/index.html">elixir</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/polyglot/index.html">polyglot</a>
      
    </span>
  </p>
</section>
<section>
  <pre>
<p>
(â†’ This (is (why (â†’ I (love <a href="http://lfe.io">Lisp Flavoured Erlang</a>)))))
</p>
</pre>

<a href="https://github.com/yurrriq/blorg/blob/master/code/so-2016.lfe">
<div class="org-src-container">
<pre class="src src-lfe">(progn
  (include-lib "clj/include/compose.lfe") ; Clojure threading macros
  (-&gt; (lodox-parse:docs #"lodox")         ; lodox docs map, generated by lodox
      (mref 'modules)                     ; lodox modules (Maclisp)
      (cadddr)                            ; 4th module =:= lodox-parse (CL)
      (mref 'exports)                     ; lodox-parse exports (Maclisp)
      (hd)                                ; first function =:= docs/1 (Erlang)
      (mref 'doc)                         ; docstring of docs/1
      (list_to_binary)                    ; string-&gt;binary
      (Elixir.Markdown:to_html            ; Elixir app wrapping C lib
       '[#(fenced_code true)])))          ; as in GitHub Flavored Markdown
</pre>
</div>
</a>

<p>
Gott nytt Ã¥r!
</p>

<div id="outline-container-orgfa7bc2d" class="outline-2">
<h2 id="orgfa7bc2d">References</h2>
<div class="outline-text-2" id="text-orgfa7bc2d">
<ul class="org-ul">
<li><a href="https://github.com/lfex/clj#future-">clj: Clojure functions and macros for LFE</a></li>
<li><a href="https://github.com/quasiquoting/lodox">Lodox: Like Codox for LFE</a></li>
<li><a href="http://www.maclisp.info/pitmanual/index.html">The Revised Maclisp Manual</a></li>
<li><a href="http://quasiquoting.org/lodox/lodox-parse.html#func-docs.2F1">lodox-parse:docs/1</a></li>
<li><a href="http://learnyousomeerlang.com/starting-out-for-real#lists">Learn You Some Erlang: Lists!</a></li>
<li><a href="https://github.com/devinus/markdown">Markdown: A simple Elixir Markdown to HTML conversion library</a></li>
<li><a href="https://github.com/hoedown/hoedown">Hoedown: Standard C99 Markdown parser</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks">GitHub Flavored Markdown: Fenced code blocks</a></li>
</ul>
</div>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Matching strings in LFE patterns</title>
    <link href="https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html" />
    <id>https://blorg.ericb.me/2015/12/matching-strings-in-lfe-patterns/index.html</id>
    <published>2015-12-28T00:00:00Z</published>
    <updated>2015-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 28 December, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/pattern-matching/index.html">pattern-matching</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
While writing an LFE solution for <a href="http://adventofcode.com/day/6">Day 6 of Advent of Code</a>, I found myself
wanting to write <code>parse_instruction/1</code> like this:
</p>
<div class="org-src-container">
<pre class="src src-erlang">parse_instruction("toggle " ++ Rest) -&gt; toggle(parse_coordinates(Rest));
parse_instruction("turn on " ++ Rest) -&gt; turn_on(parse_coordinates(Rest));
parse_instruction("turn off " ++ Rest) -&gt; turn_off(parse_coordinates(Rest)).

parse_coordinates(String) -&gt;
  {ok,[X0,Y0,X1,Y2],[]} = io_lib:fread("~d,~d through ~d,~d", String),
  {{X0,Y0},{X1,Y1}}.

toggle({{X0,Y0},{X1,Y1}}) -&gt; undefined.
turn_on({{X0,Y0},{X1,Y1}}) -&gt; undefined.
turn_off({{X0,Y0},{X1,Y1}}) -&gt; undefined.
</pre>
</div>

<p>
But the literal LFE translation <a href="https://github.com/rvirding/lfe/issues/176">doesn't work as desired</a>.
</p>
<div class="org-src-container">
<pre class="src src-lfe">(defun parse-instruction
  ([(++ "turn off " rest)]
   ...))
</pre>
</div>

<p>
Instead, invocation of a <code>defun</code> of that form throws a <code>function_clause</code> error.
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++ "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
exception error: function_clause
</pre>
</div>

<p>
After this discovery, I took to <a href="http://webchat.freenode.net/?channels=erlang-lisp">#erlang-lisp</a> and tried to figure out why.
Discussing the issue with <code>@rvirding</code> for a few minutes, we decided adding <code>++*</code>
and having patterns like <code>(++* "prefix" suffix)</code> expand to nested <code>cons</code>-es was
a solid approach.
</p>

<p>
N.B. In <a href="https://github.com/rvirding/lfe/releases/tag/v0.10.1">v0.10.1</a>, <code>exp_append/1</code> had the following <a href="https://github.com/rvirding/lfe/blob/v0.10.1/src/lfe_macro.erl#L911-L912">clause</a>, commented out.
</p>
<div class="org-src-container">
<pre class="src src-erlang">%% Cases with lists of numbers (strings).
[[N|Ns]|Es] when is_number(N) -&gt; [cons,N,['++',Ns|Es]];
</pre>
</div>

<p>
Rather than take the overly complicated approach of counting and limiting the
number of expanded <code>cons</code>-es and bottoming out to a call to <code>erlang:++</code>, we
decided to <a href="http://www.catb.org/jargon/html/K/KISS-Principle.html">keep it simple</a> and just let <code>++*</code> patterns do their own thing.
</p>

<p>
The <a href="https://github.com/rvirding/lfe/compare/b867573e9d144988b5bc70bfe00aa08b27b3a7d6...a5d7c23ebd3005d4f9ff8714d8e02f06aa2d6abe">solution</a> we came up with is as follows:
</p>
<div class="org-src-container">
<pre class="src src-erlang">%% exp_predef(...) -&gt; ...;
exp_predef(['++*'|Abody], _, St) -&gt;
  Exp = exp_prefix(Abody),
  {yes,Exp,St};
%% exp_predef(...) -&gt; ....

exp_prefix([[N|Ns]|Es]) when is_number(N) -&gt; [cons,N,['++*',Ns|Es]];
exp_prefix([[]|Es]) -&gt; ['++*'|Es];
exp_prefix(Args) -&gt; exp_append(Args).
</pre>
</div>

<p>
Now in the <a href="https://github.com/rvirding/lfe/tree/develop">develop</a> branch, you can do the following:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++* "prefix" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

<p>
or even:
</p>
<div class="org-src-container">
<pre class="src src-lfe">&gt; (defun f ([(++* "p" "r" "e" "f" "i" "x" suffix)] suffix))
f
&gt; (f "prefixsuffix")
"suffix"
</pre>
</div>

</section>
]]></summary>
</entry>
<entry>
    <title>Cons Cells in Lisp Flavoured Erlang</title>
    <link href="https://blorg.ericb.me/2015/08/cons-cells-in-lfe/index.html" />
    <id>https://blorg.ericb.me/2015/08/cons-cells-in-lfe/index.html</id>
    <published>2015-08-10T00:00:00Z</published>
    <updated>2015-08-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on 10 August, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>
      
    </span>
  </p>
</section>
<section>
  <p>
Just as you'd expect from <a href="http://learnyousomeerlang.com/starting-out-for-real#lists">Erlang</a> or <a href="http://clojure.org/lisps">another Lisp</a>, in <a href="http://lfe.gitbooks.io/tutorial/content/sequential/lists.html">LFE</a>, lists are composed of
<a href="http://cs.gmu.edu/~sean/lisp/cons/"><i>cons cells</i></a> and when you use pattern matching to bind the head and tail of a
singleton list, <code>head</code> holds the single element and <code>tail</code> is the empty list.
</p>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (let ((`(,head . ,tail) '(a-single-element)))
    (lfe_io:format '"Head: ~w~nTail: ~w~n" `(,head ,tail)))
</pre>
</div>

<pre class="example">
Head: a-single-element
Tail: ()
ok
</pre>

<p>
We can confirm this by checking that a <i>cons cell</i> of the atom
<code>a-single-element</code> and the empty list is <a href="http://erlang.org/doc/reference_manual/expressions.html#id80197">exactly equal to</a> a singleton list of
the same atom.
</p>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (=:= (cons 'a-single-element '()) '(a-single-element))
</pre>
</div>

<pre class="example">
true
</pre>

</section>
]]></summary>
</entry>
<entry>
    <title>Lisp Flavoured Erlang and Pynchon, oh my!</title>
    <link href="https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html" />
    <id>https://blorg.ericb.me/2015/08/lfe-and-pynchon/index.html</id>
    <published>2015-08-06T00:00:00Z</published>
    <updated>2015-08-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<p class="subtitle">Eric Bailey</p>

<section>
  <p>
    <label for="mn-posted-on-date" class="margin-toggle">&#8853;</label>
    <input type="checkbox" id="mn-posted-on-date" class="margin-toggle"/>
    <span class="marginnote">
      Posted on  6 August, 2015
    </span>
  </p>
  <p>
    <span class="marginnote">
      
      Tags: <a href="/tag/lfe/index.html">lfe</a>, <a href="/tag/lisp/index.html">lisp</a>, <a href="/tag/beam/index.html">beam</a>, <a href="/tag/metaprogramming/index.html">metaprogramming</a>, <a href="/tag/open-source/index.html">open-source</a>
      
    </span>
  </p>
</section>
<section>
  <p>
So, lately I've been getting increasingly into <a href="http://lfe.io">Lisp Flavoured Erlang (LFE)</a>.  If
you haven't tried it yet, or even if you have, check out the <a href="http://help.exercism.io/getting-started-with-lfe.html">Exercism.io track</a> I
helped organize.  My latest endeavour is porting Robert Levy's <a href="https://github.com/rplevy/swiss-arrows">swiss-arrows</a> from
Clojure to LFE.  It's been going well so far, despite having to rename it to
<a href="https://github.com/yurrriq/pynchon">pynchon</a>, since Erlang wasn't down with the hyphenated name and a few people on
the <a href="https://groups.google.com/forum/#!aboutgroup/lisp-flavoured-erlang">LFE Google group</a> suggested it.
</p>


<p>
Without further ado, here's a contrived example:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt; "testing"
     (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
            (lists:duplicate 3)
            (compose #'list/1 #'lists:flatten/1)
            (lfe_io:format '"non-updating: ~p\n"))
     (string:substr 5)
     (++ "winn" &lt;&gt;))
</pre>
</div>

<p>
<b>Note</b>: <code>#'compose/2</code> comes from Duncan McGreggor's <a href="https://github.com/lfex/clj">clj</a>, Clojure functions and
macros for LFE.
</p>

<p>
The wild-looking form above expands to something more like:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(-&lt;&gt;
 (progn
   (lfe_io:format
    '"non-updating: ~p\n"
    (list
     (lists:flatten
      (lists:duplicate 3 (string:substr "testing" 1 4)))))
   "testing")
 (string:substr 5)
 (++ "winn" &lt;&gt;))
</pre>
</div>

<p>
After that, it becomes apparent the "return track" is rather simple:
</p>
<div class="org-src-container">
<pre class="src src-lfe">(++ "winn" (string:substr 5 "testing"))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-lfe">&gt; (-&lt;&gt; "testing"
       (-!&lt;&gt;&gt; (string:substr &lt;&gt; 1 4)
              (lists:duplicate 3)
              (compose #'list/1 #'lists:flatten/1)
              (lfe_io:format '"non-updating: ~p\n"))
       (string:substr 5)
       (++ "winn" &lt;&gt;))
non-updating: "testtesttest" ; printed
"winning"                    ; returned
</pre>
</div>

</section>
]]></summary>
</entry>

</feed>
