#+STARTUP: showall
#+OPTIONS: toc:nil ^:{}
#+BEGIN_EXPORT html
---
title:  "OpenConnect Launch Daemon"
author: Eric Bailey
tags: darwin, vpn, openconnect, launchd, daemon
---
#+END_EXPORT

What follows is a sparsely documented literate program to manage an OpenConnect
VPN connection with =launchd= on macOS. Many thanks to [[https://github.com/ashgillman][Ashley Gilman]] for their
blog post, [[https://ashgillman.github.io/2017/02/14/openconnect-launchd.html][Managing an Openconnect VPN Connection with launchd on OSX]], upon
which this is based.

* OpenConnect Wrapper
Define a function ~handler~ to send an =INT= signal to =$PID=, then ~trap~
=TERM= signals and call ~handler~ instead, which will enable ending an
=openconnect= process gracefully with =launchd=.
#+BEGIN_SRC bash :shebang "#! /usr/bin/env bash" :tangle ../../hakyll/code/openconnect-wrapper
handler() {
    kill -INT "$PID" 2>/dev/null
}

trap handler SIGTERM
#+END_SRC

Pipe =STDIN= and pass any given arguments to =/usr/local/bin/openconnect=, and
send to the background.
#+BEGIN_SRC bash :shebang "#! /usr/bin/env bash" :tangle ../../hakyll/code/openconnect-wrapper
cat | /usr/local/bin/openconnect "$@" &
#+END_SRC

Keep the wrapper process alive as long as the =openconnect= process is, by
capturing its PID and ~wait~-ing for it.
#+BEGIN_SRC bash :shebang "#! /usr/bin/env bash" :tangle ../../hakyll/code/openconnect-wrapper
PID=$!
wait "$PID"
#+END_SRC

* Password File
Store the password (without a trailing newline) in a file,
=/etc/openconnect/passwd=, owned by =root=.

Remove read/write access from all but =root=.
#+BEGIN_SRC bash
sudo chmod og-rw /etc/openconnect/passwd
#+END_SRC

* Launch Daemon
  :PROPERTIES:
  :header-args: :padline no
  :END:

Set up a launch daemon by creating a property list file,
=/Library/LaunchDaemons/me.ericb.openconnect.plist=.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>me.ericb.openconnect-example</string>
#+END_SRC

Specify that the password, stored in =/etc/openconnect/passwd-example=, will be
supplied via stdin.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
    <key>StandardInPath</key>
    <string>/etc/openconnect/passwd-example</string>
#+END_SRC

Use the wrapper defined above.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
    <key>ProgramArguments</key>
    <array>
      <string>/etc/openconnect-wrapper</string>
#+END_SRC

Tell =openconnect= we're supplying the password via stdin.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
      <string>--passwd-on-stdin</string>
#+END_SRC

Set the OpenConnect protocol to AnyConnect.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
      <string>--protocol=anyconnect</string>
#+END_SRC

Set the reconnect timeout to =1800= seconds.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
      <string>--reconnect-timeout=1800</string>
#+END_SRC

Set the username.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
      <string>--user=alice</string>
#+END_SRC

Finally, specify the VPN server hostname.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
      <string>vpn.example.com</string>
    </array>
#+END_SRC

Configure log files for debugging.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
    <key>StandardOutPath</key>
    <string>/var/log/me.ericb.openconnectconsole.log</string>
    <key>StandardErrorPath</key>
    <string>/var/log/me.ericb.openconnect/error.log</string>
#+END_SRC

Close the open XML tags.
#+BEGIN_SRC xml :tangle ../../hakyll/code/me.ericb.openconnect.plist
  </dict>
</plist>
#+END_SRC
