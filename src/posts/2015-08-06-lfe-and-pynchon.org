#+OPTIONS: toc:nil
#+BEGIN_HTML
---
layout: post
title:  "Lisp Flavoured Erlang and Pynchon, oh my!"
date:   Thu 2015-08-06 05:43:33 CDT 2015
---
#+END_HTML

So, lately I've been getting increasingly into [[http://lfe.io][Lisp Flavoured Erlang (LFE)]].  If
you haven't tried it yet, or even if you have, check out the [[http://help.exercism.io/getting-started-with-lfe.html][Exercism.io track]] I
helped organize.  My latest endeavour is porting Robert Levy's [[https://github.com/rplevy/swiss-arrows][swiss-arrows]] from
Clojure to LFE.  It's been going well so far, despite having to rename it to
[[https://github.com/yurrriq/pynchon][pynchon]], since Erlang wasn't down with the hyphenated name and a few people on
the [[https://groups.google.com/forum/#!aboutgroup/lisp-flavoured-erlang][LFE Google group]] suggested it.


Without further ado, here's a contrived example:
#+BEGIN_SRC lfe
(-<> "testing"
     (-!<>> (string:substr <> 1 4)
            (lists:duplicate 3)
            (compose #'list/1 #'lists:flatten/1)
            (lfe_io:format '"non-updating: ~p\n"))
     (string:substr 5)
     (++ "winn" <>))
#+END_SRC

*Note*: ~#'compose/2~ comes from Duncan McGreggor's [[https://github.com/lfex/clj][clj]], Clojure functions and
macros for LFE.

The wild-looking form above expands to something more like:
#+BEGIN_SRC lfe
(-<>
 (progn
   (lfe_io:format
    '"non-updating: ~p\n"
    (list
     (lists:flatten
      (lists:duplicate 3 (string:substr "testing" 1 4)))))
   "testing")
 (string:substr 5)
 (++ "winn" <>))
#+END_SRC

After that, it becomes apparent the "return track" is rather simple:
#+BEGIN_SRC lfe
(++ "winn" (string:substr 5 "testing"))
#+END_SRC

#+BEGIN_SRC lfe
> (-<> "testing"
       (-!<>> (string:substr <> 1 4)
              (lists:duplicate 3)
              (compose #'list/1 #'lists:flatten/1)
              (lfe_io:format '"non-updating: ~p\n"))
       (string:substr 5)
       (++ "winn" <>))
non-updating: "testtesttest" ; printed
"winning"                    ; returned
#+END_SRC
