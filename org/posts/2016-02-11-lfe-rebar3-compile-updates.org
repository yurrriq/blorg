#+options: toc:nil ^:{}
#+property: header-args :exports code
#+begin_export html
---
title:  "lfe-rebar3/compile updates"
author: Eric Bailey
tags: lfe, lisp, erlang, beam, rebar3, tooling, open-source
updated: 18 December, 2023
---
#+end_export

Since much of my time these days is spent src_lfe{(or 'writing 'developing
'evangelizing)} [[http://lfe.io][LFE]], it should come as no surprise that I use the [[https://github.com/lfe-rebar3/compile][rebar3
compiler plugin]] extensively. In doing so, I noticed it always recompiles every
=.lfe= file it finds, irrespective of the staleness of the corresponding =.beam=
file. Having [[https://www.rebar3.org/docs/basic-usage#building][compiled]] a fair amount of vanilla Erlang via =rebar3=, I knew it
didn't have to be that way.

* Replacing ~run/4~ with ~run/7~

To further my quest, [[https://github.com/tsloughter][Tristan]] pointed me to [[https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L45-L48][run/7]], specifically its use of
src_erlang{[check_last_mod]}. Before I [[https://github.com/quasiquoting/lfe-compile][forked]] [[https://github.com/lfe-rebar3/compile][lfe-rebar3/compile]], it was using
[[https://github.com/rebar/rebar3/blob/beta-4/src/rebar_base_compiler.erl#L41-L43][run/4]], which does *NOT* make use of src_erlang{[check_last_mod]}, hence the
unnecessary recompilation.

[[https://github.com/lfe-rebar3/compile/blob/0.2.1/src/lr3_comp.erl#L74][lfe-rebar3/compile/src/lr3_comp.erl:74]]
#+begin_src erlang
rebar_base_compiler:run(Opts, [], Files, DoCompile).
#+end_src

After some experimentation, and [[https://www.rebar3.org/docs/dependencies#checkout-dependencies][_checkouts]] symlinking tricks, I came up with an
appropriate ~run/7~ incantation and made [[https://github.com/lfe-rebar3/compile/pull/5][a pull request]].

[[https://github.com/quasiquoting/lfe-compile/blob/0.3.0/src/lr3_comp.erl#L37-L39][quasiquoting/lfe-compile/src/lr3_comp.erl:37-39]]
#+begin_src erlang
rebar_base_compiler:run(Config, FirstFiles,
                        SourceDir, ".lfe", TargetDir, ".beam",
                        fun compile/3).
#+end_src

With those changes, ~rebar3 lfe compile~ will now skip unmodified =.lfe=
files. Not only is this The Right Thing™ to do, but it should be [[https://xkcd.com/1205/][time saver]] in
the long run.

* Examples of time saving

Here's an example of the difference when compiling [[https://github.com/quasiquoting/lodox][Lodox]]...

... using ~run/4~ via [[https://github.com/lfe-rebar3/compile/releases/tag/0.2.1][0.2.1]]:
#+begin_src bash
$ time rebar3 lfe compile
#+end_src
#+begin_example
 ~~>    Compiling ./src/lodox-html-writer.lfe ...
 ~~>    Compiling ./src/lodox-p.lfe ...
 ~~>    Compiling ./src/lodox-parse.lfe ...
 ~~>    Compiling ./src/lodox-util.lfe ...
 ~~>    Compiling ./src/lodox.lfe ...
 ~~>    Compiling ./src/pandoc.lfe ...
 ~~>    Compiling ./test/unit-lodox-tests.lfe ...
        1.39 real         1.14 user         0.24 sys
#+end_example

... using ~run/7~ via [[https://github.com/quasiquoting/lfe-compile/releases/tag/0.3.0][0.3.0]]:
#+begin_src bash
$ time rebar3 lfe compile
#+end_src
#+begin_example
        0.94 real         0.73 user         0.20 sys
#+end_example

A little more 🐄💩 microbenchmarking on a proprietary work project:
#+begin_src bash
# run/4
        3.58 real         3.02 user         0.58 sys
#+end_src

#+begin_src bash
# run/7
        1.83 real         1.46 user         0.35 sys
#+end_src
